{"version":3,"sources":["../external \"Cesium\"","state/actions/ActionTypes.ts","hooks/useDetectClickAway.ts","utils/Paths.ts","state/actions/singleCityActions.ts","utils/Constants.ts","components/WidgetPageCategoryPicker.tsx","state/actions/widgetPageActions.ts","components/AccountBadge.tsx","state/actions/SplashScreenActions.ts","components/SplashScreenHeader.tsx","state/actions/globeActions.ts","components/GlobeBackground.tsx","hooks/useMediaQuery.ts","components/TabCard.tsx","components/HomePage.tsx","state/selectors/nearCitySelectors.ts","components/DartPage.tsx","state/selectors/singleCitySelectors.ts","components/SingleCityTabCard.tsx","components/WidgetTab.tsx","components/BasicInfoTab.tsx","components/SingleCityPage.tsx","components/WidgetPage.tsx","state/actions/recentLocationsListActions.ts","components/RecentLocationsListPage.tsx","components/MainComponent.tsx","state/reducers/GlobeReducer.ts","api/nearestCityApi.ts","state/sagas/crashHandlingDecoratorSaga.ts","state/sagas/dartSaga.ts","state/sagas/recentLocationsListSaga.ts","api/singleCityApi.ts","state/sagas/singleCityDataSaga.ts","state/sagas/rootSaga.ts","state/reducers/SingleCityData.ts","configureStore.ts","state/reducers/SplashScreenReducer.ts","state/reducers/RecentLocationsList.ts","state/reducers/WidgetPageReducer.ts","components/ErrorFallbackComponent.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","components/LowSizeSpinner.tsx","utils/i18n.ts","index.tsx"],"names":["module","exports","Cesium","SAVE_USER_NAME","SKIP_INTRO","CHANGE_NAME","PICK_COORDINATES","NO_NEARBY_CITIES","NEARBY_CITIES_FETCH_SUCCEEDED","NEARBY_CITIES_FETCH_FAILED","GET_SINGLE_CITY_DATA","SINGLE_CITY_DATA_FETCH_SUCCEEDED","SINGLE_CITY_DATA_FETCH_FAILED","RESET_SINGLE_CITY","EXTENDED_CITY_DATA_FETCH_SUCCEDEED","EXTENDED_CITY_DATA_FETCH_FAILED","SAVE_RECENT_LOCATIONS","DELETE_SINGLE_RECENT_LOCATION","CLEAR_RECENTS_LIST","SET_WIDGET_PAGE_CATEGORY","useDetectClickAway","ref","callback","useEffect","ecentHandler","e","current","target","contains","document","addEventListener","removeEventListener","HOME","DART","CITY","RECENT_LIST","WIDGET","singleCityDataFetchSuccess","cityName","cityCoords","cityLink","type","ActionTypes","payload","ALL_WIDGET_CATEGORIES","WIDGET_TABS_EMOJIS","WidgetPageCategoryPicker","useState","open","setOpen","dropdownListRef","useRef","dispatch","useDispatch","currentCategory","useSelector","state","widgetPage","category","style","margin","cursor","onClick","prev","display","position","zIndex","height","top","right","color","backgroundColor","padding","borderRadius","width","listStyleType","left","border","map","className","setWidgetPageCategory","AccountBadge","name","splashScreen","userName","history","useHistory","justifyContent","location","pathname","Paths","push","src","alt","SplashScreenHeader","hasTypingFinished","setHasTypingFinished","showSkipButton","setShowSkipButton","setName","inputRef","skipWrapperRef","topWrapperRef","skippedIntro","showNavbar","setShowNavbar","transitionNavbarToSplash","transitionSplashToNavbar","wrapper","boxShadow","skipWrapper","opacity","marginTop","setTimeout","options","strings","typeSpeed","backSpeed","attr","bindInputFocusEvents","onComplete","focus","Typed","start","transition","borderBottom","value","onChange","length","pickCoordinates","coords","getNearesCitiesSuceeded","cityNames","cityLinks","GlobeBackground","widgetRef","nearestCitiesCoords","globe","fetchedNearCities","nearestCitiesNames","nearestCitiesLinks","singleCity","widget","setWidget","cesiumElement","startRotating","longtitude","speed","camera","flyTo","destination","Cartesian3","fromDegrees","easingFunction","time","duration","complete","RegExp","split","test","long","lat","nearCityId","pop","id","replace","meanLong","reduce","a","b","meanLat","full","m","scene","cartesian","pickEllipsoid","ellipsoid","cartographic","Cartographic","fromCartesian","Mt","toDegrees","longitude","latitude","newCartesian","fromRadians","useMediaQuery","query","matches","setMatches","media","window","matchMedia","listener","TabCard","selectedIndex","setSelectedIndex","maxWidth","maxHeight","option","index","textAlign","shortTitle","body","HomePage","Card","title","paragraph","emoji","address","perspective","glareBorderRadius","glareEnable","glareMaxOpacity","glareColor","glarePosition","scale","transform","fontSize","HomeTabBody","flexDirection","alignItems","displayAsSingleCard","isThereMoreThanOneCityNearby","createSelector","names","links","link","DraftPage","isOnlyCity","cityId","isThereCitySlug","extendedCityData","data","_embedded","photos","images","image","mobile","web","flat","salaries","scores","categories","summary","teleport_city_score","basics","details","slug","SingleCityTabCard","bottom","alignContent","flexWrap","borderTopRightRadius","borderTopLeftRadius","marginLeft","WidgetTab","urbanArea","BasicInfoTab","extendedData","alternateNames","alternate_names","full_name","population","currency_code","overflowY","iana_name","SingleCityPage","fetchedBasicCityData","isMobile","currentCoords","citySlug","getSingleCityData","toUpperCase","concat","WidgetPage","saveRecentLocations","locations","RecentLocationsListPage","locationsList","recentLocations","list","withRouter","exact","path","component","match","params","to","initNearbyCities","isLoading","errMess","fetchNearestCitiesData","fetch","then","response","json","crashHandlingDecoratorSaga","sagaToBecalled","args","call","console","error","throwDartSaga","throwDart","checkIfOnlyCity","takeLatest","select","Coords","nearestCitiesData","citiesCoords","forEach","nearCityData","_links","href","latlon","put","recentLocationListSaga","saveRecentLocation","latestCity","tmpLocations","JSON","parse","stringify","find","city","filter","slice","unshift","fetchBasicCityData","embedLinks","embed","getSingleCityDataSaga","getSingleCity","getBasicCityInfo","getAllPossibleEmbededData","takeLeading","cityDataResopnse","log","all","self","namesToEmbed","Object","keys","includes","i","enrichedCityDataResopnse","rootSaga","initFetchedBasicCityData","initialExtendedData","persistConfig","key","storage","debug","rootReducer","combineReducers","action","curentLinkId","isloading","sfetchedBasicCityData","persistedReducer","persistReducer","saga","createSagaMiddleware","ErrorFallbackComponent","resetErrorBoundary","role","message","caches","delete","composeEnhancers","composeWithDevTools","trace","traceLimit","store","createStore","applyMiddleware","persistor","persistStore","run","Cypress","ConfigureStore","App","FallbackComponent","onReset","purge","loading","Boolean","hostname","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","LowSizeSpinner","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","process","detection","order","lookupCookie","lookupQuerystring","interpolation","escapeValue","ReactDOM","render","StrictMode","fallback","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.fd0ec541.chunk.js","sourcesContent":["module.exports = Cesium;","export const SAVE_USER_NAME = \"SAVE_USER_NAME\";\r\nexport const SKIP_INTRO = \"SKIP_INTRO\";\r\nexport const CHANGE_NAME = \"CHANGE_NAME\";\r\n\r\nexport const START_SPINNING = \"START_SPINNING\";\r\nexport const START_REVOLVING = \"START_REVOLVING\";\r\nexport const START_SIGHTSEEING = \"START_SIGHTSEEING\";\r\n\r\nexport const PICK_COORDINATES = \"PICK_COORDINATES\";\r\n\r\nexport const NO_NEARBY_CITIES = \"NO_NEARBY_CITIES\";\r\nexport const NEARBY_CITIES_FETCH_SUCCEEDED = \"NEARBY_CITIES_FETCH_SUCCEEDED\";\r\nexport const NEARBY_CITIES_FETCH_FAILED = \"NEARBY_CITIES_FETCH_FAILED\";\r\n\r\nexport const GET_SINGLE_CITY_DATA = \"GET_SINGLE_CITY_DATA\";\r\nexport const SINGLE_CITY_DATA_FETCH_SUCCEEDED =\r\n  \"SINGLE_CITY_DATA_FETCH_SUCCEEDED\";\r\nexport const SINGLE_CITY_DATA_FETCH_FAILED = \"SINGLE_CITY_DATA_FETCH_FAILED\";\r\nexport const RESET_SINGLE_CITY = \"RESET_SINGLE_CITY\";\r\nexport const EXTENDED_CITY_DATA_FETCH_SUCCEDEED =\r\n  \"EXTENDED_CITY_DATA_FETCH_SUCCEDEED\";\r\nexport const EXTENDED_CITY_DATA_FETCH_FAILED =\r\n  \"EXTENDED_CITY_DATA_FETCH_FAILED\";\r\n\r\nexport const SAVE_RECENT_LOCATIONS = \"SAVE_RECENT_LOCATIONS\";\r\nexport const DELETE_SINGLE_RECENT_LOCATION = \"DELETE_SINGLE_RECENT_LOCATION\";\r\nexport const CLEAR_RECENTS_LIST = \"CLEAR_RECENTS_LIST\";\r\n\r\nexport const SET_WIDGET_PAGE_CATEGORY = \"SET_WIDGET_PAGE_CATEGORY\";\r\n","import { useEffect, MutableRefObject } from \"react\";\r\n\r\nexport const useDetectClickAway = (\r\n  ref: MutableRefObject<any>,\r\n  callback: () => void\r\n) => {\r\n  useEffect(() => {\r\n    const ecentHandler = (e: MouseEvent) => {\r\n      if (\r\n        ref.current &&\r\n        e.target &&\r\n        !ref.current.contains(e.target) &&\r\n        ref.current !== e.target\r\n      ) {\r\n        callback();\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", ecentHandler);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", ecentHandler);\r\n    };\r\n  }, [ref, callback]);\r\n};\r\n","export const HOME = \"/nomado/\";\r\nexport const DART = \"/nomado/dart\";\r\nexport const CITY = \"/nomado/city/:id\";\r\nexport const RECENT_LIST = \"/nomado/recentlist\";\r\nexport const WIDGET = '/nomado/widget'\r\n","import * as ActionTypes from \"../actions/ActionTypes\";\r\n\r\nexport const getSingleCityData = (id: string) => ({\r\n  type: ActionTypes.GET_SINGLE_CITY_DATA,\r\n  payload: id,\r\n});\r\n\r\nexport const singleCityDataFetchSuccess = (\r\n  cityName: string,\r\n  cityCoords: Coordinates,\r\n  cityLink: string\r\n) => ({\r\n  type: ActionTypes.SINGLE_CITY_DATA_FETCH_SUCCEEDED,\r\n  payload: { cityName, cityCoords, cityLink },\r\n});\r\n\r\nexport const singleCityDataFetchFail = () => ({\r\n  type: ActionTypes.SINGLE_CITY_DATA_FETCH_FAILED,\r\n});\r\n\r\nexport const resetSingleCity = () => ({\r\n  type: ActionTypes.RESET_SINGLE_CITY,\r\n});\r\n\r\nexport const extendedCityDataFetchSucceeded = (data: unknown) => ({\r\n  type: ActionTypes.EXTENDED_CITY_DATA_FETCH_SUCCEDEED,\r\n  payload: data,\r\n});\r\n\r\nexport const extendedCityDataFetchFailed = () => ({\r\n  type: ActionTypes.EXTENDED_CITY_DATA_FETCH_FAILED,\r\n});\r\n","export const ALL_WIDGET_CATEGORIES = [\r\n  \"scores\",\r\n  \"costs\",\r\n  \"salaries\",\r\n  \"crime\",\r\n  \"education\",\r\n  \"tolerance\",\r\n  \"weather\",\r\n  \"outdoors\",\r\n  \"startup\",\r\n];\r\n\r\nexport const WIDGET_TABS_EMOJIS = [\r\n  \"😃\",\r\n  \"💸\",\r\n  \"💹\",\r\n  \"🦹‍♂️\",\r\n  \"🏫\",\r\n  \"🌈\",\r\n  \"🌞\",\r\n  \"🗻\",\r\n  \"💻\",\r\n];\r\n","import React, { useRef, useState } from 'react'\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux'\r\nimport { useDetectClickAway } from '../hooks/useDetectClickAway'\r\nimport { setWidgetPageCategory } from '../state/actions/widgetPageActions'\r\nimport { ALL_WIDGET_CATEGORIES } from '../utils/Constants'\r\n\r\nconst WidgetPageCategoryPicker = () => {\r\n    const [open, setOpen] = useState(false)\r\n    const dropdownListRef = useRef(null)\r\n    const dispatch = useDispatch()\r\n    const currentCategory = useSelector((state: RootStateOrAny) => state.widgetPage.category)\r\n\r\n    useDetectClickAway(dropdownListRef, () => setOpen(false))\r\n\r\n    return (\r\n        <div ref={dropdownListRef} style={{ margin: '2em' }}>\r\n            <div style={{\r\n                cursor: 'pointer',\r\n                margin: '0px 1em'\r\n            }} onClick={() => { setOpen(prev => !prev) }}>category: {currentCategory}{open ? '🔼' : '🔽'}\r\n            </div>\r\n            <ul style={{\r\n                display: open ? '' : 'none',\r\n                position: 'absolute',\r\n                zIndex: 3,\r\n                height: 'fit-content',\r\n                top: '4em',\r\n                right: 0,\r\n                color: 'black',\r\n                backgroundColor: 'white',\r\n                padding: '0.5em',\r\n                borderRadius: '5px',\r\n                width: 'fit-content',\r\n                listStyleType: 'none',\r\n                left: 0,\r\n                margin: 'auto',\r\n                border: '1px black solid'\r\n            }}>\r\n                {ALL_WIDGET_CATEGORIES.map(category => (\r\n                    <li className='dropdown-item' onClick={() => dispatch(setWidgetPageCategory(category))}>{category}</li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WidgetPageCategoryPicker","import { WidgetCategory } from \"../../types/WidgetCategory\";\r\nimport * as ActionTypes from \"./ActionTypes\";\r\n\r\nexport const setWidgetPageCategory = (category: WidgetCategory) => ({\r\n  type: ActionTypes.SET_WIDGET_PAGE_CATEGORY,\r\n  payload: category,\r\n});\r\n","import React, { useRef, useState } from 'react'\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router'\r\nimport { useDetectClickAway } from '../hooks/useDetectClickAway'\r\nimport { changeName } from '../state/actions/SplashScreenActions'\r\nimport './AccountBadge.css'\r\nimport * as Paths from '../utils/Paths'\r\nimport { resetSingleCity } from '../state/actions/singleCityActions'\r\nimport WidgetPageCategoryPicker from './WidgetPageCategoryPicker'\r\n\r\nconst AccountBadge = () => {\r\n    const name = useSelector((state: RootStateOrAny) => state.splashScreen.userName)\r\n    const [open, setOpen] = useState(false)\r\n    const dropdownListRef = useRef(null)\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    useDetectClickAway(dropdownListRef, () => setOpen(false))\r\n\r\n    return (\r\n        <div style={{ display: 'flex', justifyContent: 'space-between', width: '90%' }}>\r\n\r\n            {history.location.pathname !== Paths.HOME && <h1 style={{ color: 'white', cursor: 'pointer' }} onClick={() => {\r\n                history.push(Paths.HOME);\r\n                dispatch(resetSingleCity())\r\n            }}>Home</h1>}\r\n\r\n            <div >{<WidgetPageCategoryPicker />}</div>\r\n            <div ref={dropdownListRef} className='nav-item'>\r\n                <img className='avatar' src={`https://avatars.dicebear.com/api/identicon/${name}.svg`} alt=''></img>\r\n                <div style={{\r\n                    cursor: 'pointer',\r\n                    margin: '0px 1em'\r\n                }} onClick={() => { setOpen(prev => !prev) }}>{name}{open ? '🔼' : '🔽'}\r\n                </div>\r\n                <ul style={{ display: open ? '' : 'none' }} className='dropdown-menu'>\r\n                    <li className='dropdown-item' onClick={() => history.push(Paths.RECENT_LIST)}>show recently viewed locations</li>\r\n                    <li className='dropdown-item' onClick={() => dispatch(changeName())}>change name</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AccountBadge","import * as ActionTypes from \"./ActionTypes\";\r\n\r\nexport const saveUserName = (userName: string) => ({\r\n  type: ActionTypes.SAVE_USER_NAME,\r\n  payload: userName,\r\n});\r\n\r\nexport const skipIntro = () => ({\r\n  type: ActionTypes.SKIP_INTRO,\r\n});\r\n\r\nexport const changeName = () => ({\r\n  type: ActionTypes.CHANGE_NAME,\r\n});\r\n","import React, { useRef, useEffect, useState } from 'react'\r\nimport './SplashScreen.css'\r\nimport Typed from 'typed.js'\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux'\r\nimport { saveUserName, skipIntro } from '../state/actions/SplashScreenActions'\r\nimport AccountBadge from './AccountBadge'\r\n\r\nconst SplashScreenHeader = () => {\r\n    const [hasTypingFinished, setHasTypingFinished] = useState(false)\r\n    const [showSkipButton, setShowSkipButton] = useState(false)\r\n    const [name, setName] = useState(\"\")\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n    const skipWrapperRef = useRef<HTMLDivElement>(null)\r\n    const topWrapperRef = useRef<HTMLDivElement>(null)\r\n    const skippedIntro = useSelector((state: RootStateOrAny) => state.splashScreen.skippedIntro)\r\n    const [showNavbar, setShowNavbar] = useState(skippedIntro)\r\n    const dispatch = useDispatch()\r\n    const strings = [\r\n        'Welcome digital nomad',\r\n        'what do they call you?',\r\n    ]\r\n\r\n\r\n    useEffect(() => { if (!skippedIntro) transitionNavbarToSplash() }, [skippedIntro])\r\n    const transitionSplashToNavbar = () => {\r\n        const wrapper = topWrapperRef.current!\r\n        wrapper.style.height = \"8vh\"\r\n        wrapper.style.boxShadow = '3px 3px 8px #cbced1,-3px -3px 8px #ffffff'\r\n\r\n        const skipWrapper = skipWrapperRef.current!\r\n        skipWrapper.style.opacity = '0'\r\n        skipWrapper.style.marginTop = '-20px'\r\n\r\n        setTimeout(() => setShowNavbar(true), 2000)\r\n    }\r\n\r\n    const transitionNavbarToSplash = () => {\r\n        const wrapper = topWrapperRef.current!\r\n        wrapper.style.height = \"100vh\"\r\n        wrapper.style.boxShadow = ''\r\n\r\n        setTimeout(() => {\r\n            setShowNavbar(false)\r\n            setShowSkipButton(true)\r\n        }, 100)\r\n    }\r\n\r\n    const options = {\r\n        strings: strings,\r\n        typeSpeed: 50,\r\n        backSpeed: 50,\r\n        attr: 'placeholder',\r\n        bindInputFocusEvents: true,\r\n        onComplete: () => {\r\n            setHasTypingFinished(true)\r\n            if (inputRef.current) {\r\n                inputRef.current.focus()\r\n            }\r\n            setTimeout(() => {\r\n                setShowSkipButton(true)\r\n            }, 3000)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (inputRef.current) {\r\n            const typed = new Typed(inputRef.current, options)\r\n            typed.start()\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className={showNavbar ? 'navbar' : \"wrapper\"} ref={topWrapperRef} >\r\n            {\r\n                showNavbar ?\r\n                    <AccountBadge />\r\n                    : <>\r\n                        <div style={{ transition: '2s', display: 'flex', width: '15em' }}>\r\n                            <input\r\n                                className='name-input'\r\n                                ref={inputRef}\r\n                                style={{ borderBottom: hasTypingFinished ? \"1px white solid\" : \"\" }}\r\n                                value={name}\r\n                                onChange={(e) => setName(e.target.value)}\r\n                            />\r\n                            {\r\n                                name.length > 0 &&\r\n                                <button\r\n                                    className=\"styled-button\"\r\n                                    onClick={() => {\r\n                                        dispatch(saveUserName(name))\r\n                                        transitionSplashToNavbar()\r\n                                    }}>\r\n                                    ok\r\n                                </button>\r\n                            }\r\n                        </div>\r\n                        <div\r\n                            className='skipWrapper'\r\n                            ref={skipWrapperRef}\r\n                            style={{\r\n                                marginTop:\r\n                                    showSkipButton ?\r\n                                        \"77px\"\r\n                                        : \"100px\"\r\n                            }}>\r\n                            {showSkipButton && <button className='styled-button' onClick={() => {\r\n                                transitionSplashToNavbar()\r\n                                dispatch(skipIntro())\r\n                            }}  >skip</button>}\r\n                        </div>\r\n                    </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SplashScreenHeader\r\n\r\n","import * as ActionTypes from \"./ActionTypes\";\r\n\r\nexport const startSpinning = () => ({\r\n  type: ActionTypes.START_SPINNING,\r\n});\r\n\r\nexport const startRevolving = () => ({\r\n  type: ActionTypes.START_REVOLVING,\r\n});\r\n\r\nexport const startSightseeing = () => ({\r\n  type: ActionTypes.START_SIGHTSEEING,\r\n});\r\n\r\nexport const pickCoordinates = (coords: Coordinates) => ({\r\n  type: ActionTypes.PICK_COORDINATES,\r\n  payload: coords,\r\n});\r\n\r\nexport const noCitiesFoundInNearby = () => ({\r\n  type: ActionTypes.NO_NEARBY_CITIES,\r\n});\r\n\r\nexport const getNearesCitiesSuceeded = (\r\n  cityNames: string[],\r\n  cityCoords: Coordinates[],\r\n  cityLinks: string[]\r\n) => ({\r\n  type: ActionTypes.NEARBY_CITIES_FETCH_SUCCEEDED,\r\n  payload: { cityNames, cityCoords, cityLinks },\r\n});\r\n\r\nexport const getNearesCitiesFailed = () => ({\r\n  type: ActionTypes.NEARBY_CITIES_FETCH_FAILED,\r\n});\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport '../App.css';\r\nimport { CesiumWidget } from 'resium'\r\nimport { Cartesian3, Cartographic, Math as Mt } from 'cesium'\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux';\r\nimport { pickCoordinates, startSightseeing } from '../state/actions/globeActions';\r\nimport * as Paths from '../utils/Paths'\r\nimport { useHistory } from 'react-router';\r\n\r\nconst GlobeBackground = () => {\r\n    const widgetRef = useRef<any>(null)\r\n\r\n    const nearestCitiesCoords = useSelector((state: RootStateOrAny) => state.globe.fetchedNearCities.cityCoords)\r\n    const nearestCitiesNames = useSelector((state: RootStateOrAny) => state.globe.fetchedNearCities.cityNames)\r\n    const nearestCitiesLinks = useSelector((state: RootStateOrAny) => state.globe.fetchedNearCities.cityLinks)\r\n    const singleCity = useSelector((state: RootStateOrAny) => state.singleCity)\r\n    const dispatch = useDispatch()\r\n    const [widget, setWidget] = useState<any>()\r\n\r\n    useEffect(() => {\r\n        setWidget(widgetRef.current.cesiumElement)\r\n    }, [])\r\n\r\n    const history = useHistory()\r\n\r\n    const startRotating = (longtitude: number, speed: number) => {\r\n        if (widget)\r\n            widget.camera\r\n                .flyTo({\r\n                    destination: Cartesian3.fromDegrees(longtitude, 0, 20000000),\r\n                    easingFunction: (time: number) => time,\r\n                    duration: speed,\r\n                    complete: () => startRotating(longtitude - 90, speed)\r\n                })\r\n    }\r\n\r\n    switch (history.location.pathname) {\r\n        case Paths.DART:\r\n            startRotating(-90, 0.2)\r\n            break\r\n        case Paths.HOME || Paths.WIDGET || Paths.RECENT_LIST:\r\n            startRotating(-180, 10)\r\n            break\r\n        // case Paths.CITY.split(\":\")[0] + history.location.pathname.split(\"/\").pop():\r\n        //     {\r\n        //         console.log(\"lol\")\r\n        //         if (widget)\r\n        //             widget.camera\r\n        //                 .flyTo({\r\n        //                     destination: Cartesian3.fromDegrees(nearestCitiesCoords[0].long, nearestCitiesCoords[0].lat, 20000)\r\n        //                 })\r\n        //         break\r\n        //     }\r\n    }\r\n    //}, [])\r\n\r\n    //useEffect(() => {\r\n    //    if (globeInstructions.fastSpinning)\r\n    //        startRotating(-90, 0.2)\r\n    //    if (globeInstructions.slowRevolving)\r\n    //        startRotating(-180, 10)\r\n    //}, [globeInstructions.fastSpinning, globeInstructions.slowRevolving])\r\n\r\n\r\n    useEffect(() => {\r\n        const regEx = new RegExp(`${Paths.CITY.split(\":\")[0]}\\\\\\d+`)\r\n        if (regEx.test(history.location.pathname) && widget) {\r\n            if (nearestCitiesCoords?.length === 1) {\r\n                widget.camera\r\n                    .flyTo({\r\n                        destination: Cartesian3.fromDegrees(nearestCitiesCoords[0].long, nearestCitiesCoords[0].lat, 20000)\r\n                    })\r\n                const nearCityId = nearestCitiesLinks[0].split(\":\").pop()\r\n                if (singleCity.id !== nearCityId) {\r\n                    history.push(Paths.CITY.replace(\":id\", nearCityId))\r\n                }\r\n            }\r\n\r\n            if (nearestCitiesCoords?.length > 1) {\r\n                const meanLong = nearestCitiesCoords.reduce((a: Coordinates, b: Coordinates) => (a.long + b.long)) / nearestCitiesCoords.length\r\n                const meanLat = nearestCitiesCoords.reduce((a: Coordinates, b: Coordinates) => (a.lat + b.lat)) / nearestCitiesCoords.length\r\n\r\n                widget.camera\r\n                    .flyTo({\r\n                        destination: Cartesian3.fromDegrees(meanLong, meanLat, 40000)\r\n                    })\r\n            }\r\n        }\r\n    }, [nearestCitiesCoords, widget])\r\n\r\n    return (\r\n\r\n        <CesiumWidget\r\n            ref={widgetRef}\r\n            full\r\n            onClick={(m) => {\r\n                dispatch(startSightseeing())\r\n                const widget = widgetRef.current.cesiumElement\r\n                const scene = widget.scene\r\n\r\n                const cartesian = widget.camera.pickEllipsoid?.(\r\n                    m.position,\r\n                    scene.globe.ellipsoid\r\n                ) ?? null\r\n                if (!cartesian) return\r\n\r\n                const cartographic = Cartographic.fromCartesian(cartesian)\r\n                dispatch(pickCoordinates({\r\n                    long: Mt.toDegrees(cartographic.longitude),\r\n                    lat: Mt.toDegrees(cartographic.latitude\r\n                    )\r\n                }))\r\n\r\n                const newCartesian = Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, nearestCitiesNames.length === 0 ? 20000000 : 20000)\r\n                widget.camera\r\n                    .flyTo({\r\n                        destination: newCartesian,\r\n                        easingFunction: (time: number) => time,\r\n                        duration: 1\r\n                    })\r\n            }}\r\n        >\r\n        </CesiumWidget>\r\n\r\n    )\r\n}\r\n\r\nexport default GlobeBackground","import { useState, useEffect } from \"react\";\r\n\r\nexport const useMediaQuery = (query: string) => {\r\n  const [matches, setMatches] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const media = window.matchMedia(query);\r\n    if (media.matches !== matches) {\r\n      setMatches(media.matches);\r\n    }\r\n    const listener = () => setMatches(media.matches);\r\n    window.addEventListener(\"resize\", listener);\r\n    return () => window.removeEventListener(\"resize\", listener);\r\n  }, [matches, query]);\r\n\r\n  return matches;\r\n};\r\n","import React, { useState } from 'react'\r\nimport './HomePage.css'\r\n\r\nconst TabCard = ({ options }: { options: any[] }) => {\r\n    const [selectedIndex, setSelectedIndex] = useState(0)\r\n\r\n    return (\r\n        <div className='card-wrapper'>\r\n            <div style={{\r\n                maxWidth: '40em',\r\n                maxHeight: '30em',\r\n                backgroundColor: 'white',\r\n                borderRadius: '20px'\r\n\r\n            }}>\r\n                <div style={{ display: 'flex' }}>\r\n                    {options.map((option, index) => {\r\n                        const className =\r\n                            index === selectedIndex ?\r\n                                'selected-tab'\r\n                                : index === selectedIndex - 1 ?\r\n                                    'tab-before'\r\n                                    : index === selectedIndex + 1 ?\r\n                                        'tab-after'\r\n                                        : index === 0 ?\r\n                                            'left-edge-tab' :\r\n                                            index === options.length - 1 ?\r\n                                                'right-edge-tab' :\r\n                                                'further-tab'\r\n                        return (\r\n                            <div\r\n                                key={index}\r\n                                onClick={() => setSelectedIndex(index)}\r\n                                style={{ width: 'max-content', textAlign: 'center' }}\r\n                            ><h1 className={className}>\r\n                                    {option.shortTitle}\r\n                                </h1>\r\n                            </div>\r\n                        )\r\n                    })}</div>\r\n\r\n                {options[selectedIndex].body}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TabCard","import React from 'react'\r\nimport Tilt from 'react-parallax-tilt';\r\nimport { useHistory } from 'react-router';\r\nimport { useMediaQuery } from '../hooks/useMediaQuery';\r\nimport './HomePage.css'\r\nimport TabCard from './TabCard';\r\nimport * as Paths from '../utils/Paths'\r\n\r\nconst HomePage = () => {\r\n    const history = useHistory()\r\n\r\n    const Card = ({ title, paragraph, emoji, address }: { title: string, paragraph: string, emoji: string, address: string }) => {\r\n        const history = useHistory()\r\n        const handleRedirect = () => {\r\n            history.push(address)\r\n        }\r\n        return (\r\n            <div onClick={handleRedirect}>\r\n                <Tilt className='tilt-parallax' perspective={1000} glareBorderRadius={'10px'} glareEnable glareMaxOpacity={0.9} glareColor=\"lightblue\" glarePosition=\"all\" scale={1.1} >\r\n                    <div style={{ maxHeight: '30em', maxWidth: '20em', backgroundColor: 'white', borderRadius: '20px' }}>\r\n                        <h1 style={{ transform: 'translateZ(30px)' }}>{title}</h1>\r\n                        <p style={{ transform: 'translateZ(30px)' }}>{paragraph}</p>\r\n                        <p style={{ transform: 'translateZ(30px)', fontSize: '5rem' }}>{emoji}</p>\r\n                    </div>\r\n                </Tilt>\r\n            </div>\r\n        )\r\n    }\r\n    const HomeTabBody = ({ option }: any) => {\r\n        return (\r\n            <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }} >\r\n                <h1 >{option.title}</h1>\r\n                <p style={{ width: '95%', textAlign: 'center' }}>{option.paragraph}</p>\r\n                <p\r\n                    onClick={() => history.push(option.address)}\r\n                    className='tab-button'>\r\n                    {option.emoji}\r\n                </p>\r\n            </div>)\r\n    }\r\n    const options = [\r\n        {\r\n            shortTitle: 'Dart throw🎯',\r\n            title: \"Try your luck\",\r\n            paragraph: \"throw a dart at the globe to select destination of your next journey\",\r\n            emoji: '🎯',\r\n            address: Paths.DART\r\n        },\r\n        {\r\n            shortTitle: 'Widget🔍',\r\n            title: \"Search by Widget\",\r\n            paragraph: \"search for details a holiday destination by browsing through the Teleport widget\",\r\n            emoji: '🔍',\r\n            address: Paths.WIDGET\r\n        }]\r\n\r\n    const displayAsSingleCard = useMediaQuery('(max-width: 833px)')\r\n\r\n    return (\r\n        <>{\r\n            displayAsSingleCard ?\r\n                <TabCard options={options.map(option => { return { ...option, body: <HomeTabBody option={option} /> } })} />\r\n                : <div className='card-wrapper'>\r\n                    <Card title=\"Try your luck\" paragraph=\"throw a dart at the globe to select destination of your next journey\" emoji='🎯' address={Paths.DART} />\r\n                    <Card title=\"Search by Widget\" paragraph=\"search for details a holiday destination by browsing through the Teleport widget\" emoji='🔍' address={Paths.WIDGET} />\r\n                </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HomePage","import { RootStateOrAny } from \"react-redux\";\r\nimport { createSelector } from \"reselect\";\r\n\r\nconst getNearCityNames = (state: RootStateOrAny) =>\r\n  state.globe.fetchedNearCities.cityNames;\r\nconst getNearCityCoords = (state: RootStateOrAny) =>\r\n  state.globe.fetchedNearCities.cityCoords;\r\nconst getNearCityLinks = (state: RootStateOrAny) =>\r\n  state.globe.fetchedNearCities.cityLinks;\r\n\r\nconst isThereMoreThanOneCityNearby = createSelector(\r\n  getNearCityNames,\r\n  getNearCityCoords,\r\n  getNearCityLinks,\r\n  (names, coords, links) => {\r\n    if (names.length === 1 || coords.length === 1 || links.length === 1)\r\n      return { name: names[0], coords: coords[0], link: links[0] };\r\n    if (names.length === 0 || coords.length === 0 || links.length === 1)\r\n      return false;\r\n    return true;\r\n  }\r\n);\r\n\r\nexport { isThereMoreThanOneCityNearby };\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router'\r\nimport { startSpinning } from '../state/actions/globeActions'\r\nimport { resetSingleCity } from '../state/actions/singleCityActions'\r\nimport { isThereMoreThanOneCityNearby } from '../state/selectors/nearCitySelectors'\r\nimport './DartPage.css'\r\nimport * as Paths from '../utils/Paths'\r\n\r\nconst DraftPage = () => {\r\n    const history = useHistory()\r\n    const isOnlyCity = useSelector(isThereMoreThanOneCityNearby)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(startSpinning())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (typeof isOnlyCity !== 'boolean') {\r\n            const cityId = isOnlyCity.link.split(':').pop().split(\"/\")[0]\r\n            history.push(Paths.CITY.replace(\":id\", cityId))\r\n        }\r\n    }, [isOnlyCity])\r\n\r\n    return (\r\n        <>\r\n            <div className='dart-top-label' > click on globe to throw a dart</div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DraftPage\r\n","import { RootStateOrAny } from \"react-redux\";\r\nimport { createSelector } from \"reselect\";\r\n\r\nconst getUrbanAreaImages = (state: RootStateOrAny) =>\r\n  state.singleCity.extendedCityData.data?._embedded?.[\"city:urban_area\"]\r\n    ?._embedded?.[\"ua:images\"]?.photos ?? false;\r\n\r\nconst getSalaries = (state: RootStateOrAny) =>\r\n  state.singleCity.extendedCityData.data?._embedded?.[\"city:urban_area\"]\r\n    ?._embedded?.[\"ua:salaries\"]?.salaries ?? false;\r\n\r\nconst getCityScores = (state: RootStateOrAny) =>\r\n  state.singleCity.extendedCityData.data?._embedded?.[\"city:urban_area\"]\r\n    ?._embedded?.[\"ua:scores\"] ?? false;\r\n\r\nconst getUrbanAreaBasics = (state: RootStateOrAny) =>\r\n  state.singleCity.extendedCityData.data?._embedded?.[\"city:urban_area\"] ??\r\n  false;\r\n\r\nconst getUrbanAreaDetails = (state: RootStateOrAny) =>\r\n  state.singleCity.extendedCityData.data?._embedded?.[\"city:urban_area\"]\r\n    ?._embedded?.[\"ua:details\"]?.categories ?? false;\r\n\r\nconst getUrbanAreaSlug = (state: RootStateOrAny) =>\r\n  state.singleCity.extendedCityData.data?._embedded?.[\"city:urban_area\"]\r\n    ?.slug ?? false;\r\n\r\nconst areThereCityPhotos = createSelector(getUrbanAreaImages, (images) => {\r\n  if (images)\r\n    return images\r\n      .map((image: { image: { mobile: string; web: string } }) => [\r\n        image.image.mobile,\r\n        image.image.web,\r\n      ])\r\n      .flat();\r\n  return false;\r\n});\r\n\r\nconst areThereSalaryInfo = createSelector(getSalaries, (salaries) => {\r\n  return salaries;\r\n});\r\n\r\nconst areThereCityScores = createSelector(getCityScores, (scores) => {\r\n  if (scores)\r\n    return {\r\n      categories: scores.categories,\r\n      summary: scores.summary,\r\n      teleport_city_score: scores.teleport_city_score,\r\n    };\r\n  return false;\r\n});\r\n\r\nconst areThereUrbanAreaBasics = createSelector(\r\n  getUrbanAreaBasics,\r\n  (basics) => basics\r\n);\r\n\r\nconst areThereUrbanAreaDetails = createSelector(\r\n  getUrbanAreaDetails,\r\n  (details) => details\r\n);\r\n\r\nconst isThereCitySlug =createSelector(getUrbanAreaSlug,(slug)=>slug)\r\n\r\nexport {\r\n  areThereCityScores,\r\n  areThereSalaryInfo,\r\n  areThereCityPhotos,\r\n  areThereUrbanAreaBasics,\r\n  areThereUrbanAreaDetails,\r\n  isThereCitySlug\r\n};\r\n","import React, { useState } from 'react'\r\nimport './HomePage.css'\r\n\r\nconst SingleCityTabCard = ({ options }: { options: any[] }) => {\r\n    const [selectedIndex, setSelectedIndex] = useState(0)\r\n    const [open, setOpen] = useState(true)\r\n    const [openWide, setOpenWide] = useState(false)\r\n\r\n    return (\r\n        <div style={{\r\n            display: 'flex',\r\n            zIndex: 1,\r\n            alignItems: 'stretch',\r\n            justifyContent: 'center',\r\n            color: 'black',\r\n            bottom: '0em',\r\n            position: 'absolute',\r\n            alignContent: 'center',\r\n            flexWrap: 'wrap',\r\n            flexDirection: 'row',\r\n            right: 0,\r\n            left: 0\r\n        }}>\r\n            <div style={{\r\n                maxHeight: '80vh',\r\n                backgroundColor: 'white',\r\n                borderTopRightRadius: '20px',\r\n                borderTopLeftRadius: '20px',\r\n                width: '100vw'\r\n            }}>\r\n                <div style={{ display: 'flex' }}>\r\n                    {options.map((option, index) => {\r\n                        const className =\r\n                            index === selectedIndex ?\r\n                                'selected-tab'\r\n                                : index === selectedIndex - 1 ?\r\n                                    'tab-before'\r\n                                    : index === selectedIndex + 1 ?\r\n                                        'tab-after'\r\n                                        : index === 0 ?\r\n                                            'left-edge-tab' :\r\n                                            index === options.length - 1 ?\r\n                                                'right-edge-tab' :\r\n                                                'further-tab'\r\n                        return (\r\n                            <div\r\n                                key={index}\r\n                                onClick={() => setSelectedIndex(index)}\r\n                                style={{ width: 'max-content', textAlign: 'center' }}\r\n                            ><h1 className={className}>\r\n                                    {option.shortTitle}\r\n                                </h1>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                    <div style={{\r\n                        cursor: 'pointer',\r\n                        margin: '0.5em 1em',\r\n                        right: 0,\r\n                        marginLeft: 'auto',\r\n                    }} onClick={() => { setOpen(prev => !prev) }}>{open ? '🔽' : '🔼'}\r\n                    </div>\r\n                </div>\r\n                {open && options[selectedIndex].body}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleCityTabCard","import React from 'react'\r\nimport { WidgetCategory } from '../types/WidgetCategory'\r\n\r\ninterface WidgetTabProps {\r\n    category: WidgetCategory;\r\n    urbanArea: string\r\n}\r\n\r\nconst WidgetTab = ({ category, urbanArea }: WidgetTabProps) => {\r\n    return <iframe style={{\r\n        height: '40vh',\r\n        width: '100%'\r\n    }} src={`https://teleport.org/cities/${urbanArea}/widget/${category}/?currency=USD&citySwitcher=false`} title='widget' ></iframe>\r\n}\r\n\r\nexport default WidgetTab","import React from 'react'\r\nimport { useSelector, RootStateOrAny } from 'react-redux'\r\n\r\nconst BasicInfoTab = () => {\r\n    const extendedData = useSelector((state: RootStateOrAny) => state.singleCity.extendedCityData.data)\r\n    const alternateNames = extendedData._embedded?.['city:alternate-names']\r\n        .alternate_names\r\n\r\n    return (\r\n        <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }} >\r\n            <h1 >{extendedData.full_name}</h1>\r\n            <div>\r\n                <p style={{ textAlign: 'center' }}>city population: {extendedData.population}</p>\r\n                <p style={{ textAlign: 'center' }}>\r\n                    country population: {extendedData._embedded?.['city:country'].population ?? ''}\r\n                </p>\r\n            </div>\r\n\r\n            <p style={{ textAlign: 'center' }}>\r\n                currency: {extendedData._embedded?.['city:country']?.currency_code ?? ''}\r\n            </p>\r\n            {\r\n                alternateNames?.length > 1 && (\r\n                    <div style={{ display: 'flex', alignItems: 'center', textAlign: 'center', justifyContent: 'center' }}>\r\n                        alternative names:<div style={{ maxHeight: '4em', overflowY: 'auto' }}>\r\n                            {alternateNames\r\n                                .map((name: any) => (\r\n                                    <p key={name.name} style={{ margin: '0em' }}>\r\n                                        {name.name}\r\n                                    </p>\r\n                                ))}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            <p style={{ textAlign: 'center' }}>\r\n                timezone: {extendedData._embedded?.['city:timezone'].iana_name ?? ''}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BasicInfoTab","import React, { useEffect } from 'react'\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from '../hooks/useMediaQuery'\r\nimport { getSingleCityData } from '../state/actions/singleCityActions'\r\nimport {\r\n    isThereCitySlug\r\n} from '../state/selectors/singleCitySelectors'\r\nimport './SingleCityPage.css'\r\nimport { pickCoordinates } from '../state/actions/globeActions'\r\nimport SingleCityTabCard from './SingleCityTabCard'\r\nimport WidgetTab from './WidgetTab'\r\nimport { ALL_WIDGET_CATEGORIES, WIDGET_TABS_EMOJIS } from '../utils/Constants'\r\nimport BasicInfoTab from './BasicInfoTab'\r\n\r\nconst SingleCityPage = ({ id }: { id: string }) => {\r\n    const cityName: string = useSelector((state: RootStateOrAny) => state.singleCity.fetchedBasicCityData.cityName)\r\n    const cityId = useSelector((state: RootStateOrAny) => state.singleCity.id)\r\n    const nearestCitiesLinks = useSelector((state: RootStateOrAny) => state.globe.fetchedNearCities.cityLinks)\r\n    const isMobile = useMediaQuery('(max-width: 833px)')\r\n    const cityCoords = useSelector((state: RootStateOrAny) => state.singleCity.fetchedBasicCityData.cityCoords)\r\n    const currentCoords = useSelector((state: RootStateOrAny) => state.globe.coords)\r\n    const citySlug = useSelector(isThereCitySlug)\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (cityId !== id) {\r\n            dispatch(getSingleCityData(id))\r\n        }\r\n        const nearCityId = nearestCitiesLinks[0]?.split(\":\")?.pop() ?? \"\"\r\n        if (id !== nearCityId) {\r\n            if (cityCoords.long !== currentCoords.long || cityCoords.lat !== currentCoords.lat)\r\n                dispatch(pickCoordinates({\r\n                    long: cityCoords.long,\r\n                    lat: cityCoords.lat\r\n                }))\r\n        }\r\n    }, [id, cityCoords])\r\n\r\n    const options = [\r\n        {\r\n            shortTitle: 'Basic Info🌐',\r\n            body: <BasicInfoTab />,\r\n        }]\r\n\r\n    if (citySlug)\r\n        options.push(...ALL_WIDGET_CATEGORIES.map((category: string, index: number) => ({\r\n            shortTitle: category.replace(category[0], category[0].toUpperCase()).concat(WIDGET_TABS_EMOJIS[index]),\r\n            body: <WidgetTab category={category} urbanArea={citySlug} />,\r\n        })))\r\n\r\n\r\n    return (\r\n        <>\r\n            <div style={{ fontSize: 'xx-large', position: isMobile ? 'absolute' : 'relative', width: isMobile ? '100%' : '', margin: '0' }} className='dart-top-label' >{cityName}</div>\r\n            <SingleCityTabCard options={options} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SingleCityPage","import React from 'react'\r\nimport { useSelector, RootStateOrAny } from 'react-redux'\r\nimport './SingleCityPage.css'\r\n\r\nconst WidgetPage = () => {\r\n\r\n    const currentCategory = useSelector((state: RootStateOrAny) => state.widgetPage.category)\r\n\r\n    return (\r\n        <iframe style={{\r\n            position: 'absolute',\r\n            zIndex: 1,\r\n            top: '8vh',\r\n            height: '100vh',\r\n            width: '100%',\r\n            right: 0,\r\n            left: 0,\r\n            margin: 'auto'\r\n        }} src={`https://teleport.org/cities/berlin/widget/${currentCategory}/?currency=USD`} title='widget' ></iframe>\r\n    )\r\n}\r\n\r\nexport default WidgetPage","import * as ActionTypes from \"./ActionTypes\";\r\n\r\nexport const saveRecentLocations = (locations: any[]) => ({\r\n  type: ActionTypes.SAVE_RECENT_LOCATIONS,\r\n  payload: locations,\r\n});\r\n\r\nexport const deleteSingleRecentLoaction = (id: string) => ({\r\n  type: ActionTypes.DELETE_SINGLE_RECENT_LOCATION,\r\n  payload: id,\r\n});\r\n\r\nexport const clearRecentsList = () => ({\r\n  type: ActionTypes.CLEAR_RECENTS_LIST,\r\n});\r\n","import React from 'react'\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router'\r\nimport { clearRecentsList, deleteSingleRecentLoaction } from '../state/actions/recentLocationsListActions'\r\nimport * as Paths from '../utils/Paths'\r\n\r\nconst RecentLocationsListPage = () => {\r\n    const history = useHistory()\r\n    const locationsList = useSelector((state: RootStateOrAny) => state.recentLocations.list)\r\n    const dispatch = useDispatch()\r\n    const placeholderStyle = {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        zIndex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: '100vh',\r\n        width: '100vw',\r\n        color: 'white',\r\n        position: 'absolute'\r\n    }\r\n\r\n    return (\r\n        <div style={placeholderStyle as any}><ol>\r\n            {\r\n                locationsList.map((location: any) => <li key={location.id}><span style={{ cursor: 'pointer' }} onClick={() => history.push(Paths.CITY.replace(\":id\", location.id))}>{location.fetchedBasicCityData.cityName}</span> - {location.userName} <span style={{ cursor: 'pointer' }} onClick={() => { dispatch(deleteSingleRecentLoaction(location.id)) }}>🗑</span></li>)\r\n            }\r\n        </ol>\r\n            <button className='styled-button' onClick={() => dispatch(clearRecentsList())}>clear list</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecentLocationsListPage","import React from 'react';\r\nimport '../App.css';\r\nimport SplashScreenHeader from './SplashScreenHeader';\r\nimport GlobeBackground from './GlobeBackground';\r\nimport { Switch, Route, withRouter, Redirect } from 'react-router-dom'\r\nimport HomePage from './HomePage'\r\nimport DraftPage from './DartPage';\r\nimport SingleCityPage from './SingleCityPage';\r\nimport WidgetPage from './WidgetPage';\r\nimport RecentLocationsListPage from './RecentLocationsListPage';\r\nimport * as Paths from '../utils/Paths'\r\n\r\nfunction MainComponent() {\r\n\r\n    const SingleCityPageById = ({ match }: { match: any }) => {\r\n        return <SingleCityPage id={match.params.id} />\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <SplashScreenHeader />\r\n            <Switch>\r\n                <Route exact path={Paths.DART} component={DraftPage} />\r\n                <Route exact path={Paths.WIDGET} component={WidgetPage} />\r\n                <Route exact path={Paths.CITY}\r\n                    component={SingleCityPageById}\r\n                />\r\n                <Route exact path={Paths.RECENT_LIST} component={RecentLocationsListPage} />\r\n                <Route exact path={Paths.HOME} component={HomePage} />\r\n                <Redirect to={Paths.HOME} />\r\n            </Switch>\r\n            <GlobeBackground />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(MainComponent);\r\n","import * as ActionTypes from \"../actions/ActionTypes\";\r\nimport { Action } from \"../../types/ActionType\";\r\n\r\nconst initNearbyCities = {\r\n  isLoading: false,\r\n  errMess: \"\",\r\n  cityNames: [] as string[],\r\n  cityCoords: [] as Coordinates[],\r\n  cityLinks: [] as string[],\r\n};\r\n\r\nexport const globeReducer = (\r\n  state = {\r\n    coords: { long: 0, lat: 0 } as Coordinates,\r\n    fetchedNearCities: initNearbyCities,\r\n  },\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionTypes.PICK_COORDINATES:\r\n      return {\r\n        ...state,\r\n        coords: action.payload,\r\n      };\r\n    case ActionTypes.NO_NEARBY_CITIES:\r\n      return {\r\n        ...state,\r\n        fetchedNearCities: initNearbyCities,\r\n      };\r\n    case ActionTypes.NEARBY_CITIES_FETCH_FAILED:\r\n      return {\r\n        ...state,\r\n        fetchedNearCities: {\r\n          ...initNearbyCities,\r\n          errMess: \"failed to fetch\",\r\n        },\r\n      };\r\n    case ActionTypes.NEARBY_CITIES_FETCH_SUCCEEDED:\r\n      return {\r\n        ...state,\r\n        fetchedNearCities: {\r\n          ...initNearbyCities,\r\n          cityNames: action.payload.cityNames,\r\n          cityCoords: action.payload.cityCoords,\r\n          cityLinks: action.payload.cityLinks,\r\n        },\r\n      };\r\n    case ActionTypes.RESET_SINGLE_CITY: {\r\n      return {\r\n        ...state,\r\n        fetchedNearCities: initNearbyCities,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const fetchNearestCitiesData = async (coords: Coordinates) => {\r\n  return fetch(\r\n    `https://api.teleport.org/api/locations/${coords.lat},${coords.long}/?embed=location%3Anearest-cities%2Flocation%3Anearest-city`\r\n  ).then((response) => response.json());\r\n};\r\n","import {call,StrictEffect} from 'redux-saga/effects'\r\n\r\nfunction* crashHandlingDecoratorSaga(\r\n    sagaToBecalled:any,\r\n    ...args:any[]\r\n):Generator<StrictEffect,any,any>{\r\n    try{\r\n        yield call(sagaToBecalled,...args);\r\n    }catch(error){\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nexport default crashHandlingDecoratorSaga","import {\r\n  call,\r\n  put,\r\n  select,\r\n  StrictEffect,\r\n  takeLatest,\r\n} from \"redux-saga/effects\";\r\nimport { fetchNearestCitiesData } from \"../../api/nearestCityApi\";\r\nimport * as ActionTypes from \"../actions/ActionTypes\";\r\nimport {\r\n  getNearesCitiesFailed,\r\n  getNearesCitiesSuceeded,\r\n  noCitiesFoundInNearby,\r\n} from \"../actions/globeActions\";\r\nimport { singleCityDataFetchSuccess } from \"../actions/singleCityActions\";\r\nimport crashHandlingDecoratorSaga from \"./crashHandlingDecoratorSaga\";\r\n\r\nfunction* throwDartSaga() {\r\n  yield takeLatest(\r\n    ActionTypes.PICK_COORDINATES,\r\n    crashHandlingDecoratorSaga,\r\n    throwDart\r\n  );\r\n}\r\n\r\nfunction* throwDart(): Generator<StrictEffect, any, any> {\r\n  const Coords = yield select((state) => state.globe.coords);\r\n  const nearestCitiesData = yield call(fetchNearestCitiesData, Coords);\r\n  const cityNames: string[] = [];\r\n  const citiesCoords: Coordinates[] = [];\r\n  const cityLinks: string[] = [];\r\n  if (nearestCitiesData) {\r\n    nearestCitiesData._embedded[\"location:nearest-cities\"]?.forEach(\r\n      (nearCityData: any) => {\r\n        cityLinks.push(nearCityData._links[\"location:nearest-city\"].href);\r\n        cityNames.push(nearCityData._links[\"location:nearest-city\"].name);\r\n        const latlon =\r\n          nearCityData._embedded[\"location:nearest-city\"].location.latlon;\r\n        citiesCoords.push({ long: latlon.longitude, lat: latlon.latitude });\r\n      }\r\n    );\r\n\r\n    if (cityNames.length === 0 || citiesCoords.length === 0) {\r\n      yield put(noCitiesFoundInNearby());\r\n      return;\r\n    }\r\n    yield put(getNearesCitiesSuceeded(cityNames, citiesCoords, cityLinks));\r\n    yield call(checkIfOnlyCity, cityNames, citiesCoords, cityLinks);\r\n  } else {\r\n    yield put(getNearesCitiesFailed());\r\n  }\r\n}\r\n\r\nfunction* checkIfOnlyCity(\r\n  cityNames: string[],\r\n  citiesCoords: Coordinates[],\r\n  cityLinks: string[]\r\n): Generator<StrictEffect, any, any> {\r\n  if (\r\n    cityNames.length === 1 ||\r\n    citiesCoords.length === 1 ||\r\n    cityLinks.length === 1\r\n  )\r\n    yield put(\r\n      singleCityDataFetchSuccess(cityNames[0], citiesCoords[0], cityLinks[0])\r\n    );\r\n}\r\n\r\nexport default throwDartSaga;\r\n","import { put, select, StrictEffect, takeLatest } from \"redux-saga/effects\";\r\nimport * as ActionTypes from \"../actions/ActionTypes\";\r\nimport { saveRecentLocations } from \"../actions/recentLocationsListActions\";\r\n\r\nfunction* recentLocationListSaga() {\r\n  yield takeLatest(\r\n    ActionTypes.SINGLE_CITY_DATA_FETCH_SUCCEEDED,\r\n    saveRecentLocation\r\n  );\r\n}\r\n\r\nfunction* saveRecentLocation(): Generator<StrictEffect, any, any> {\r\n  const locations = yield select((state) => state.recentLocations.list);\r\n  const userName = yield select((state) => state.splashScreen.userName);\r\n  const latestCity = yield select((state) => state.singleCity);\r\n  let tmpLocations = JSON.parse(JSON.stringify(locations));\r\n  //case when there is already thius location on the list\r\n  if (locations.find((city: any) => city.id === latestCity.id))\r\n    tmpLocations = locations.filter((city: any) => city.id !== latestCity.id);\r\n  //case when there are over 40 saved locations\r\n  if (locations.length >= 40) tmpLocations = locations.slice(0, -1);\r\n\r\n  tmpLocations.unshift({ ...latestCity, userName });\r\n\r\n  const latestCityId = latestCity.fetchedBasicCityData.cityLink\r\n    .split(\":\")\r\n    .pop()\r\n    .split(\"/\")[0];\r\n  if (latestCityId === latestCity.id)\r\n    yield put(saveRecentLocations(tmpLocations));\r\n  return;\r\n}\r\n\r\nexport default recentLocationListSaga;\r\n","export const fetchBasicCityData = async (\r\n  cityId: string,\r\n  embedLinks?: string\r\n) => {\r\n  let embed = \"\";\r\n  if (embedLinks) embed = embed + embedLinks;\r\n  return fetch(\r\n    `https://api.teleport.org/api/cities/geonameid:${cityId}/${embed}`\r\n  ).then((response) => response.json());\r\n};\r\n","import {\r\n  all,\r\n  call,\r\n  put,\r\n  select,\r\n  StrictEffect,\r\n  takeLeading,\r\n} from \"redux-saga/effects\";\r\nimport { fetchBasicCityData } from \"../../api/singleCityApi\";\r\nimport * as ActionTypes from \"../actions/ActionTypes\";\r\nimport {\r\n  extendedCityDataFetchFailed,\r\n  extendedCityDataFetchSucceeded,\r\n  singleCityDataFetchFail,\r\n  singleCityDataFetchSuccess,\r\n} from \"../actions/singleCityActions\";\r\nimport crashHandlingDecoratorSaga from \"./crashHandlingDecoratorSaga\";\r\n\r\nfunction* getSingleCityDataSaga() {\r\n  yield takeLeading(\r\n    ActionTypes.GET_SINGLE_CITY_DATA,\r\n    crashHandlingDecoratorSaga,\r\n    getSingleCity\r\n  );\r\n}\r\n\r\nfunction* getSingleCity(): Generator<StrictEffect, any, any> {\r\n  const cityId = yield select((state) => state.singleCity.id);\r\n  const cityDataResopnse = yield call(fetchBasicCityData, cityId);\r\n  console.log(cityDataResopnse);\r\n  if (cityDataResopnse) {\r\n    yield all([\r\n      call(getBasicCityInfo, cityDataResopnse),\r\n      call(getAllPossibleEmbededData, cityDataResopnse),\r\n    ]);\r\n  } else {\r\n    yield put(singleCityDataFetchFail());\r\n  }\r\n}\r\n\r\nfunction* getBasicCityInfo(\r\n  cityDataResopnse: any\r\n): Generator<StrictEffect, any, any> {\r\n  const cityLink = yield select(\r\n    (state) => state.singleCity.fetchedBasicCityData.cityLink\r\n  );\r\n  const cityName = yield select(\r\n    (state) => state.singleCity.fetchedBasicCityData.cityName\r\n  );\r\n  const cityCoords = yield select(\r\n    (state) => state.singleCity.fetchedBasicCityData.cityCoords\r\n  );\r\n  if (\r\n    cityLink.length < 1 ||\r\n    cityName.length < 1 ||\r\n    !cityCoords.long ||\r\n    !cityCoords.lat\r\n  ) {\r\n    const latlon = cityDataResopnse.location.latlon;\r\n    yield put(\r\n      singleCityDataFetchSuccess(\r\n        cityDataResopnse.name,\r\n        { long: latlon.longitude, lat: latlon.latitude },\r\n        cityDataResopnse._links.self.href\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nfunction* getAllPossibleEmbededData(\r\n  cityDataResopnse: any\r\n): Generator<StrictEffect, any, any> {\r\n  const cityId = yield select((state) => state.singleCity.id);\r\n\r\n  const namesToEmbed = Object.keys(cityDataResopnse._links).filter((link) =>\r\n    link.includes(\"city\")\r\n  );\r\n\r\n  let embed = \"\";\r\n  if (namesToEmbed && namesToEmbed.length > 0) {\r\n    namesToEmbed.forEach((link, i) => {\r\n      if (i === 0) embed = embed + \"?embed=\";\r\n      else embed = embed + \"&embed=\";\r\n      if (link.includes(\"urban_area\")) {\r\n        embed =\r\n          embed +\r\n          \"city:urban_area/ua:images&embed=city:urban_area/ua:salaries&embed=city:urban_area/ua:scores&embed=city:urban_area/ua:details\";\r\n      } else embed = embed + link;\r\n    });\r\n  }\r\n\r\n  const enrichedCityDataResopnse = yield call(\r\n    fetchBasicCityData,\r\n    cityId,\r\n    embed\r\n  );\r\n\r\n  if (enrichedCityDataResopnse) {\r\n    yield put(extendedCityDataFetchSucceeded(enrichedCityDataResopnse));\r\n  } else {\r\n    yield put(extendedCityDataFetchFailed());\r\n  }\r\n}\r\n\r\nexport default getSingleCityDataSaga;\r\n","import { all } from \"redux-saga/effects\";\r\nimport throwDartSaga from \"./dartSaga\";\r\nimport recentLocationListSaga from \"./recentLocationsListSaga\";\r\nimport getSingleCityDataSaga from \"./singleCityDataSaga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    throwDartSaga(),\r\n    getSingleCityDataSaga(),\r\n    recentLocationListSaga(),\r\n  ]);\r\n}\r\n","import * as ActionTypes from \"../actions/ActionTypes\";\r\nimport { Action } from \"../../types/ActionType\";\r\n\r\nconst initFetchedBasicCityData = {\r\n  isLoading: false,\r\n  errMess: \"\",\r\n  cityName: \"\",\r\n  cityCoords: {},\r\n  cityLink: \"\",\r\n};\r\n\r\nconst initialExtendedData = {\r\n  isLoading: false,\r\n  errMess: \"\",\r\n  data: {},\r\n};\r\n\r\nexport const singleCityDataReducer = (\r\n  state = {\r\n    id: \"\",\r\n    fetchedBasicCityData: initFetchedBasicCityData,\r\n    extendedCityData: initialExtendedData,\r\n  },\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionTypes.GET_SINGLE_CITY_DATA: {\r\n      const curentLinkId =\r\n        state.fetchedBasicCityData.cityLink\r\n          .split(\":\")\r\n          .pop()\r\n          ?.split?.(\"/\")?.[0] ?? \"\";\r\n\r\n      return {\r\n        ...state,\r\n        id: action.payload,\r\n        fetchedBasicCityData:\r\n          curentLinkId === action.payload\r\n            ? state.fetchedBasicCityData\r\n            : { ...initFetchedBasicCityData, isloading: true },\r\n      };\r\n    }\r\n    case ActionTypes.SINGLE_CITY_DATA_FETCH_SUCCEEDED:\r\n      return {\r\n        ...state,\r\n        fetchedBasicCityData: {\r\n          ...initFetchedBasicCityData,\r\n          cityName: action.payload.cityName,\r\n          cityCoords: action.payload.cityCoords,\r\n          cityLink: action.payload.cityLink,\r\n        },\r\n      };\r\n    case ActionTypes.SINGLE_CITY_DATA_FETCH_FAILED:\r\n      return {\r\n        ...state,\r\n        sfetchedBasicCityData: {\r\n          ...initFetchedBasicCityData,\r\n          errMess: \"failed to fetch basic city info\",\r\n        },\r\n      };\r\n    case ActionTypes.RESET_SINGLE_CITY: {\r\n      return {\r\n        ...state,\r\n        id: \"\",\r\n        fetchedBasicCityData: initFetchedBasicCityData,\r\n        extendedCityData: initialExtendedData,\r\n      };\r\n    }\r\n    case ActionTypes.EXTENDED_CITY_DATA_FETCH_SUCCEDEED:\r\n      return {\r\n        ...state,\r\n\r\n        extendedCityData: {\r\n          ...initialExtendedData,\r\n          data: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.EXTENDED_CITY_DATA_FETCH_FAILED:\r\n      return {\r\n        ...state,\r\n        extendedCityData: {\r\n          ...initialExtendedData,\r\n          errMess: \"could not fetch extended data\",\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { splashScreenReducer } from \"./state/reducers/SplashScreenReducer\";\r\nimport { globeReducer } from \"./state/reducers/GlobeReducer\";\r\nimport rootSaga from \"./state/sagas/rootSaga\";\r\nimport { singleCityDataReducer } from \"./state/reducers/SingleCityData\";\r\nimport { recentLocationsListReducer } from \"./state/reducers/RecentLocationsList\";\r\nimport { widgetPageReducer } from \"./state/reducers/WidgetPageReducer\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  debug: true,\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  splashScreen: splashScreenReducer,\r\n  globe: globeReducer,\r\n  singleCity: singleCityDataReducer,\r\n  recentLocations: recentLocationsListReducer,\r\n  widgetPage: widgetPageReducer,\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst saga = createSagaMiddleware();\r\n\r\nexport const ConfigureStore = () => {\r\n  const composeEnhancers = composeWithDevTools({ trace: true, traceLimit: 25 });\r\n  const store = createStore(\r\n    persistedReducer,\r\n    composeEnhancers(applyMiddleware(saga))\r\n  );\r\n  const persistor = persistStore(store);\r\n  saga.run(rootSaga);\r\n\r\n  if ((window as Window & typeof globalThis & { Cypress: any }).Cypress) {\r\n    (window as Window & typeof globalThis & { store: any }).store = store;\r\n  }\r\n\r\n  return { store, persistor };\r\n};\r\n","import * as ActionTypes from \"../actions/ActionTypes\";\r\nimport { Action } from \"../../types/ActionType\";\r\n\r\nexport const splashScreenReducer = (\r\n  state = {\r\n    userName: \"\",\r\n    skippedIntro: false,\r\n  },\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SAVE_USER_NAME:\r\n      return {\r\n        ...state,\r\n        userName: action.payload,\r\n        skippedIntro: true,\r\n      };\r\n    case ActionTypes.SKIP_INTRO:\r\n      return {\r\n        ...state,\r\n        skippedIntro: true,\r\n      };\r\n    case ActionTypes.CHANGE_NAME:\r\n      return {\r\n        ...state,\r\n        skippedIntro: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as ActionTypes from \"../actions/ActionTypes\";\r\nimport { Action } from \"../../types/ActionType\";\r\n\r\nexport const recentLocationsListReducer = (\r\n  state = {\r\n    list: [],\r\n  },\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SAVE_RECENT_LOCATIONS:\r\n      return {\r\n        ...state,\r\n        list: action.payload,\r\n      };\r\n    case ActionTypes.DELETE_SINGLE_RECENT_LOCATION:\r\n      return {\r\n        ...state,\r\n        list: state.list.filter((city: any) => city.id !== action.payload),\r\n      };\r\n    case ActionTypes.CLEAR_RECENTS_LIST:\r\n      return {\r\n        ...state,\r\n        list: [],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as ActionTypes from \"../actions/ActionTypes\";\r\nimport { Action } from \"../../types/ActionType\";\r\n\r\nexport const widgetPageReducer = (\r\n  state = {\r\n    category: \"startup\",\r\n  },\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_WIDGET_PAGE_CATEGORY:\r\n      return {\r\n        ...state,\r\n        category: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react'\r\n\r\nconst ErrorFallbackComponent = ({ error, resetErrorBoundary }: any) => {\r\n    const resetApp = () => {\r\n        resetErrorBoundary();\r\n        if (caches) {\r\n            caches\r\n                .keys()\r\n                .then(names => {\r\n                    for (const name of names) {\r\n                        caches.delete(name)\r\n                    }\r\n                })\r\n        }\r\n        document.location.href = '/'\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", justifyContent: 'center', alignItems: 'center', height: '100%' }}>\r\n            <div role=\"alert\">\r\n                <h1 style={{ textAlign: 'center' }}>\r\n                    Something Went Wrong 😕\r\n                </h1>\r\n                <pre style={{ color: 'red' }}>{error.message}</pre>\r\n                <button onClick={resetApp}>try again</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorFallbackComponent","import React from 'react';\nimport './App.css';\nimport MainComponent from './components/MainComponent';\nimport { ErrorBoundary } from 'react-error-boundary'\nimport { Provider as ReduxProvider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { ConfigureStore } from './configureStore';\nimport ErrorFallbackComponent from './components/ErrorFallbackComponent'\n\nconst { store, persistor } = ConfigureStore()\n\nfunction App() {\n  return (\n    <ErrorBoundary\n      FallbackComponent={ErrorFallbackComponent}\n      onReset={\n        async () => {\n          await persistor.purge()\n        }\n      }\n    >\n      <ReduxProvider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <BrowserRouter>\n            <MainComponent />\n          </BrowserRouter>\n        </PersistGate>\n      </ReduxProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport './Spinner.css'\r\n\r\nconst LowSizeSpinner = () => (\r\n    <div className=\"container\">\r\n        <div className=\"spinner\">\r\n            <div />\r\n            <div />\r\n        </div>\r\n    </div>\r\n)\r\nexport default LowSizeSpinner","import i18n from \"i18next\";\r\nimport Backend from \"i18next-http-backend\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\ni18n\r\n  .use(Backend)\r\n  .use(LanguageDetector)\r\n  .use(initReactI18next)\r\n  .init({\r\n    fallbackLng: \"en\",\r\n    debug: process.env.NODE_ENV === \"development\",\r\n    detection: {\r\n      order: [\"querystring\", \"cookie\", \"header\"],\r\n      lookupCookie: \"lang\",\r\n      lookupQuerystring: \"lang\",\r\n      caches: [\"cookie\"],\r\n    },\r\n    interpolation: {\r\n      escapeValue: false,\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport LowSizeSpinner from './components/LowSizeSpinner';\nimport './utils/i18n'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback={<LowSizeSpinner />}>\n      <App />\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}