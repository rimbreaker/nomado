{"version":3,"sources":["../external \"Cesium\"","state/actions/ActionTypes.ts","utils/Paths.ts","components/AccountBadge.tsx","hooks/useDetectClickAway.ts","state/actions/SplashScreenActions.ts","components/SplashScreenHeader.tsx","state/actions/globeActions.ts","components/GlobeBackground.tsx","hooks/useMediaQuery.ts","components/TabCard.tsx","components/HomePage.tsx","state/actions/singleCityActions.ts","state/selectors/nearCitySelectors.ts","components/DartPage.tsx","state/selectors/singleCitySelectors.ts","hooks/useComponentDraggable.ts","components/CityPhotoComponent.tsx","components/SalaryListComponent.tsx","components/SingleCityPage.tsx","components/WidgetPage.tsx","state/actions/recentLocationsListActions.ts","components/RecentLocationsListPage.tsx","components/MainComponent.tsx","state/reducers/GlobeReducer.ts","api/nearestCityApi.ts","state/sagas/crashHandlingDecoratorSaga.ts","state/sagas/dartSaga.ts","state/sagas/recentLocationsListSaga.ts","api/singleCityApi.ts","state/sagas/singleCityDataSaga.ts","state/sagas/rootSaga.ts","state/reducers/SingleCityData.ts","configureStore.ts","state/reducers/SplashScreenReducer.ts","state/reducers/RecentLocationsList.ts","components/ErrorFallbackComponent.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","components/LowSizeSpinner.tsx","utils/i18n.ts","index.tsx"],"names":["module","exports","Cesium","SAVE_USER_NAME","SKIP_INTRO","CHANGE_NAME","START_SPINNING","START_REVOLVING","START_SIGHTSEEING","PICK_COORDINATES","NO_NEARBY_CITIES","NEARBY_CITIES_FETCH_SUCCEEDED","NEARBY_CITIES_FETCH_FAILED","GET_SINGLE_CITY_DATA","SINGLE_CITY_DATA_FETCH_SUCCEEDED","SINGLE_CITY_DATA_FETCH_FAILED","RESET_SINGLE_CITY","EXTENDED_CITY_DATA_FETCH_SUCCEDEED","EXTENDED_CITY_DATA_FETCH_FAILED","SAVE_RECENT_LOCATIONS","DELETE_SINGLE_RECENT_LOCATION","CLEAR_RECENTS_LIST","HOME","DART","CITY","RECENT_LIST","WIDGET","AccountBadge","ref","callback","name","useSelector","state","splashScreen","userName","useState","open","setOpen","dropdownListRef","useRef","history","useHistory","dispatch","useDispatch","useEffect","ecentHandler","e","current","target","contains","document","addEventListener","removeEventListener","style","display","justifyContent","width","location","pathname","Paths","color","cursor","onClick","push","className","src","alt","margin","prev","type","ActionTypes","SplashScreenHeader","hasTypingFinished","setHasTypingFinished","showSkipButton","setShowSkipButton","setName","inputRef","skipWrapperRef","topWrapperRef","skippedIntro","showNavbar","setShowNavbar","transitionNavbarToSplash","transitionSplashToNavbar","wrapper","height","boxShadow","skipWrapper","opacity","marginTop","setTimeout","options","strings","typeSpeed","backSpeed","attr","bindInputFocusEvents","onComplete","focus","Typed","start","transition","borderBottom","value","onChange","length","payload","pickCoordinates","coords","getNearesCitiesSuceeded","cityNames","cityCoords","cityLinks","GlobeBackground","widgetRef","nearestCitiesCoords","globe","fetchedNearCities","nearestCitiesNames","nearestCitiesLinks","singleCity","widget","setWidget","cesiumElement","startRotating","longtitude","speed","camera","flyTo","destination","Cartesian3","fromDegrees","easingFunction","time","duration","complete","RegExp","split","test","long","lat","nearCityId","pop","id","replace","meanLong","reduce","a","b","meanLat","full","m","scene","cartesian","pickEllipsoid","position","ellipsoid","cartographic","Cartographic","fromCartesian","Mt","toDegrees","longitude","latitude","newCartesian","fromRadians","useMediaQuery","query","matches","setMatches","media","window","matchMedia","listener","TabCard","selectedIndex","setSelectedIndex","maxWidth","maxHeight","backgroundColor","borderRadius","map","option","index","textAlign","shortTitle","flexDirection","alignItems","title","paragraph","address","emoji","HomePage","Card","perspective","glareBorderRadius","glareEnable","glareMaxOpacity","glareColor","glarePosition","scale","transform","fontSize","displayAsSingleCard","singleCityDataFetchSuccess","cityName","cityLink","isThereMoreThanOneCityNearby","createSelector","names","links","link","DraftPage","isOnlyCity","cityId","areThereCityPhotos","extendedCityData","data","_embedded","photos","images","image","areThereSalaryInfo","salaries","useComponentDragable","scores","categories","summary","teleport_city_score","pos1","pos2","pos3","pos4","dragMouseDown","event","preventDefault","clientX","clientY","onmouseup","closeDragElement","onmousemove","elementDrag","bottom","onmousedown","top","offsetTop","left","offsetLeft","CityPhotoComponent","cityPhotos","isMobile","containerRef","web","SalaryListComponent","fetchedBasicCityData","salaryInfo","zIndex","overflowY","salary","i","job","listStyleType","fontWeight","Math","round","salary_percentiles","percentile_25","percentile_50","percentile_75","SingleCityPage","currentCoords","getSingleCityData","WidgetPage","getElementById","marginLeft","marginRight","right","saveRecentLocations","locations","RecentLocationsListPage","locationsList","recentLocations","list","withRouter","exact","path","component","match","params","to","initNearbyCities","isLoading","errMess","fetchNearestCitiesData","fetch","then","response","json","crashHandlingDecoratorSaga","sagaToBecalled","args","call","console","error","throwDartSaga","throwDart","checkIfOnlyCity","takeLatest","select","Coords","nearestCitiesData","citiesCoords","forEach","nearCityData","_links","href","latlon","put","recentLocationListSaga","saveRecentLocation","latestCity","tmpLocations","JSON","parse","stringify","find","city","filter","slice","unshift","fetchBasicCityData","embedLinks","embed","getSingleCityDataSaga","getSingleCity","getBasicCityInfo","getAllPossibleEmbededData","takeLeading","cityDataResopnse","all","self","namesToEmbed","Object","keys","includes","enrichedCityDataResopnse","rootSaga","initFetchedBasicCityData","initialExtendedData","persistConfig","key","storage","debug","rootReducer","combineReducers","action","fastSpinning","slowRevolving","curentLinkId","isloading","sfetchedBasicCityData","persistedReducer","persistReducer","saga","createSagaMiddleware","ErrorFallbackComponent","resetErrorBoundary","role","message","caches","delete","composeEnhancers","composeWithDevTools","trace","traceLimit","store","createStore","applyMiddleware","persistor","persistStore","run","Cypress","ConfigureStore","App","FallbackComponent","onReset","purge","loading","Boolean","hostname","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","LowSizeSpinner","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","process","detection","order","lookupCookie","lookupQuerystring","interpolation","escapeValue","ReactDOM","render","StrictMode","fallback","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ca659e8a.chunk.js","sourcesContent":["module.exports = Cesium;","export const SAVE_USER_NAME = \"SAVE_USER_NAME\";\r\nexport const SKIP_INTRO = \"SKIP_INTRO\";\r\nexport const CHANGE_NAME = \"CHANGE_NAME\";\r\n\r\nexport const START_SPINNING = \"START_SPINNING\";\r\nexport const START_REVOLVING = \"START_REVOLVING\";\r\nexport const START_SIGHTSEEING = \"START_SIGHTSEEING\";\r\n\r\nexport const PICK_COORDINATES = \"PICK_COORDINATES\";\r\n\r\nexport const NO_NEARBY_CITIES = \"NO_NEARBY_CITIES\";\r\nexport const NEARBY_CITIES_FETCH_SUCCEEDED = \"NEARBY_CITIES_FETCH_SUCCEEDED\";\r\nexport const NEARBY_CITIES_FETCH_FAILED = \"NEARBY_CITIES_FETCH_FAILED\";\r\n\r\nexport const GET_SINGLE_CITY_DATA = \"GET_SINGLE_CITY_DATA\";\r\nexport const SINGLE_CITY_DATA_FETCH_SUCCEEDED =\r\n  \"SINGLE_CITY_DATA_FETCH_SUCCEEDED\";\r\nexport const SINGLE_CITY_DATA_FETCH_FAILED = \"SINGLE_CITY_DATA_FETCH_FAILED\";\r\nexport const RESET_SINGLE_CITY = \"RESET_SINGLE_CITY\";\r\nexport const EXTENDED_CITY_DATA_FETCH_SUCCEDEED =\r\n  \"EXTENDED_CITY_DATA_FETCH_SUCCEDEED\";\r\nexport const EXTENDED_CITY_DATA_FETCH_FAILED =\r\n  \"EXTENDED_CITY_DATA_FETCH_FAILED\";\r\n\r\nexport const SAVE_RECENT_LOCATIONS = \"SAVE_RECENT_LOCATIONS\";\r\nexport const DELETE_SINGLE_RECENT_LOCATION = \"DELETE_SINGLE_RECENT_LOCATION\";\r\nexport const CLEAR_RECENTS_LIST = \"CLEAR_RECENTS_LIST\";\r\n","export const HOME = \"/nomado/\";\r\nexport const DART = \"/nomado/dart\";\r\nexport const CITY = \"/nomado/city/:id\";\r\nexport const RECENT_LIST = \"/nomado/recentlist\";\r\nexport const WIDGET = '/nomado/widget'\r\n","import React, { useRef, useState } from 'react'\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router'\r\nimport { useDetectClickAway } from '../hooks/useDetectClickAway'\r\nimport { changeName } from '../state/actions/SplashScreenActions'\r\nimport './AccountBadge.css'\r\nimport * as Paths from '../utils/Paths'\r\n\r\nconst AccountBadge = () => {\r\n    const name = useSelector((state: RootStateOrAny) => state.splashScreen.userName)\r\n    const [open, setOpen] = useState(false)\r\n    const dropdownListRef = useRef(null)\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    useDetectClickAway(dropdownListRef, () => setOpen(false))\r\n\r\n    return (\r\n        <div style={{ display: 'flex', justifyContent: 'space-between', width: '90%' }}>\r\n\r\n            {history.location.pathname !== Paths.HOME && <h1 style={{ color: 'white', cursor: 'pointer' }} onClick={() => history.push(Paths.HOME)}>Home</h1>}\r\n            {/* arbitrary div for flexbox */}\r\n            <div ></div>\r\n            <div ref={dropdownListRef} className='nav-item'>\r\n                <img className='avatar' src={`https://avatars.dicebear.com/api/identicon/${name}.svg`} alt=''></img>\r\n                <div style={{\r\n                    cursor: 'pointer',\r\n                    margin: '0px 1em'\r\n                }} onClick={() => { setOpen(prev => !prev) }}>{name}{open ? '🔼' : '🔽'}\r\n                </div>\r\n                <ul style={{ display: open ? '' : 'none' }} className='dropdown-menu'>\r\n                    <li className='dropdown-item' onClick={() => history.push(Paths.RECENT_LIST)}>show recently viewed locations</li>\r\n                    <li className='dropdown-item' onClick={() => dispatch(changeName())}>change name</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AccountBadge","import { useEffect, MutableRefObject } from \"react\";\r\n\r\nexport const useDetectClickAway = (\r\n  ref: MutableRefObject<any>,\r\n  callback: () => void\r\n) => {\r\n  useEffect(() => {\r\n    const ecentHandler = (e: MouseEvent) => {\r\n      if (\r\n        ref.current &&\r\n        e.target &&\r\n        !ref.current.contains(e.target) &&\r\n        ref.current !== e.target\r\n      ) {\r\n        callback();\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", ecentHandler);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", ecentHandler);\r\n    };\r\n  }, [ref, callback]);\r\n};\r\n","import * as ActionTypes from \"./ActionTypes\";\r\n\r\nexport const saveUserName = (userName: string) => ({\r\n  type: ActionTypes.SAVE_USER_NAME,\r\n  payload: userName,\r\n});\r\n\r\nexport const skipIntro = () => ({\r\n  type: ActionTypes.SKIP_INTRO,\r\n});\r\n\r\nexport const changeName = () => ({\r\n  type: ActionTypes.CHANGE_NAME,\r\n});\r\n","import React, { useRef, useEffect, useState } from 'react'\r\nimport './SplashScreen.css'\r\nimport Typed from 'typed.js'\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux'\r\nimport { saveUserName, skipIntro } from '../state/actions/SplashScreenActions'\r\nimport AccountBadge from './AccountBadge'\r\n\r\nconst SplashScreenHeader = () => {\r\n    const [hasTypingFinished, setHasTypingFinished] = useState(false)\r\n    const [showSkipButton, setShowSkipButton] = useState(false)\r\n    const [name, setName] = useState(\"\")\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n    const skipWrapperRef = useRef<HTMLDivElement>(null)\r\n    const topWrapperRef = useRef<HTMLDivElement>(null)\r\n    const skippedIntro = useSelector((state: RootStateOrAny) => state.splashScreen.skippedIntro)\r\n    const [showNavbar, setShowNavbar] = useState(skippedIntro)\r\n    const dispatch = useDispatch()\r\n    const strings = [\r\n        'Welcome digital nomad',\r\n        'what do they call you?',\r\n    ]\r\n\r\n\r\n    useEffect(() => { if (!skippedIntro) transitionNavbarToSplash() }, [skippedIntro])\r\n    const transitionSplashToNavbar = () => {\r\n        const wrapper = topWrapperRef.current!\r\n        wrapper.style.height = \"8vh\"\r\n        wrapper.style.boxShadow = '3px 3px 8px #cbced1,-3px -3px 8px #ffffff'\r\n\r\n        const skipWrapper = skipWrapperRef.current!\r\n        skipWrapper.style.opacity = '0'\r\n        skipWrapper.style.marginTop = '-20px'\r\n\r\n        setTimeout(() => setShowNavbar(true), 2000)\r\n    }\r\n\r\n    const transitionNavbarToSplash = () => {\r\n        const wrapper = topWrapperRef.current!\r\n        wrapper.style.height = \"100vh\"\r\n        wrapper.style.boxShadow = ''\r\n\r\n        setTimeout(() => {\r\n            setShowNavbar(false)\r\n            setShowSkipButton(true)\r\n        }, 100)\r\n    }\r\n\r\n    const options = {\r\n        strings: strings,\r\n        typeSpeed: 50,\r\n        backSpeed: 50,\r\n        attr: 'placeholder',\r\n        bindInputFocusEvents: true,\r\n        onComplete: () => {\r\n            setHasTypingFinished(true)\r\n            if (inputRef.current) {\r\n                inputRef.current.focus()\r\n            }\r\n            setTimeout(() => {\r\n                setShowSkipButton(true)\r\n            }, 3000)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (inputRef.current) {\r\n            const typed = new Typed(inputRef.current, options)\r\n            typed.start()\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className={showNavbar ? 'navbar' : \"wrapper\"} ref={topWrapperRef} >\r\n            {\r\n                showNavbar ?\r\n                    <AccountBadge />\r\n                    : <>\r\n                        <div style={{ transition: '2s', display: 'flex', width: '15em' }}>\r\n                            <input\r\n                                className='name-input'\r\n                                ref={inputRef}\r\n                                style={{ borderBottom: hasTypingFinished ? \"1px white solid\" : \"\" }}\r\n                                value={name}\r\n                                onChange={(e) => setName(e.target.value)}\r\n                            />\r\n                            {\r\n                                name.length > 0 &&\r\n                                <button\r\n                                    className=\"styled-button\"\r\n                                    onClick={() => {\r\n                                        dispatch(saveUserName(name))\r\n                                        transitionSplashToNavbar()\r\n                                    }}>\r\n                                    ok\r\n                                </button>\r\n                            }\r\n                        </div>\r\n                        <div\r\n                            className='skipWrapper'\r\n                            ref={skipWrapperRef}\r\n                            style={{\r\n                                marginTop:\r\n                                    showSkipButton ?\r\n                                        \"77px\"\r\n                                        : \"100px\"\r\n                            }}>\r\n                            {showSkipButton && <button className='styled-button' onClick={() => {\r\n                                transitionSplashToNavbar()\r\n                                dispatch(skipIntro())\r\n                            }}  >skip</button>}\r\n                        </div>\r\n                    </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SplashScreenHeader\r\n\r\n","import * as ActionTypes from \"./ActionTypes\";\r\n\r\nexport const startSpinning = () => ({\r\n  type: ActionTypes.START_SPINNING,\r\n});\r\n\r\nexport const startRevolving = () => ({\r\n  type: ActionTypes.START_REVOLVING,\r\n});\r\n\r\nexport const startSightseeing = () => ({\r\n  type: ActionTypes.START_SIGHTSEEING,\r\n});\r\n\r\nexport const pickCoordinates = (coords: Coordinates) => ({\r\n  type: ActionTypes.PICK_COORDINATES,\r\n  payload: coords,\r\n});\r\n\r\nexport const noCitiesFoundInNearby = () => ({\r\n  type: ActionTypes.NO_NEARBY_CITIES,\r\n});\r\n\r\nexport const getNearesCitiesSuceeded = (\r\n  cityNames: string[],\r\n  cityCoords: Coordinates[],\r\n  cityLinks: string[]\r\n) => ({\r\n  type: ActionTypes.NEARBY_CITIES_FETCH_SUCCEEDED,\r\n  payload: { cityNames, cityCoords, cityLinks },\r\n});\r\n\r\nexport const getNearesCitiesFailed = () => ({\r\n  type: ActionTypes.NEARBY_CITIES_FETCH_FAILED,\r\n});\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport '../App.css';\r\nimport { CesiumWidget } from 'resium'\r\nimport { Cartesian3, Cartographic, Math as Mt } from 'cesium'\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux';\r\nimport { pickCoordinates, startSightseeing } from '../state/actions/globeActions';\r\nimport * as Paths from '../utils/Paths'\r\nimport { useHistory } from 'react-router';\r\n\r\nconst GlobeBackground = () => {\r\n    const widgetRef = useRef<any>(null)\r\n\r\n    const nearestCitiesCoords = useSelector((state: RootStateOrAny) => state.globe.fetchedNearCities.cityCoords)\r\n    const nearestCitiesNames = useSelector((state: RootStateOrAny) => state.globe.fetchedNearCities.cityNames)\r\n    const nearestCitiesLinks = useSelector((state: RootStateOrAny) => state.globe.fetchedNearCities.cityLinks)\r\n    const singleCity = useSelector((state: RootStateOrAny) => state.singleCity)\r\n    const dispatch = useDispatch()\r\n    const [widget, setWidget] = useState<any>()\r\n\r\n    useEffect(() => {\r\n        setWidget(widgetRef.current.cesiumElement)\r\n    }, [])\r\n\r\n    const history = useHistory()\r\n\r\n    const startRotating = (longtitude: number, speed: number) => {\r\n        if (widget)\r\n            widget.camera\r\n                .flyTo({\r\n                    destination: Cartesian3.fromDegrees(longtitude, 0, 20000000),\r\n                    easingFunction: (time: number) => time,\r\n                    duration: speed,\r\n                    complete: () => startRotating(longtitude - 90, speed)\r\n                })\r\n    }\r\n\r\n    switch (history.location.pathname) {\r\n        case Paths.DART:\r\n            startRotating(-90, 0.2)\r\n            break\r\n        case Paths.HOME || Paths.WIDGET || Paths.RECENT_LIST:\r\n            startRotating(-180, 10)\r\n            break\r\n        // case Paths.CITY.split(\":\")[0] + history.location.pathname.split(\"/\").pop():\r\n        //     {\r\n        //         console.log(\"lol\")\r\n        //         if (widget)\r\n        //             widget.camera\r\n        //                 .flyTo({\r\n        //                     destination: Cartesian3.fromDegrees(nearestCitiesCoords[0].long, nearestCitiesCoords[0].lat, 20000)\r\n        //                 })\r\n        //         break\r\n        //     }\r\n    }\r\n    //}, [])\r\n\r\n    //useEffect(() => {\r\n    //    if (globeInstructions.fastSpinning)\r\n    //        startRotating(-90, 0.2)\r\n    //    if (globeInstructions.slowRevolving)\r\n    //        startRotating(-180, 10)\r\n    //}, [globeInstructions.fastSpinning, globeInstructions.slowRevolving])\r\n\r\n\r\n    useEffect(() => {\r\n        const regEx = new RegExp(`${Paths.CITY.split(\":\")[0]}\\\\\\d+`)\r\n        if (regEx.test(history.location.pathname) && widget) {\r\n            if (nearestCitiesCoords?.length === 1) {\r\n                widget.camera\r\n                    .flyTo({\r\n                        destination: Cartesian3.fromDegrees(nearestCitiesCoords[0].long, nearestCitiesCoords[0].lat, 20000)\r\n                    })\r\n                const nearCityId = nearestCitiesLinks[0].split(\":\").pop()\r\n                if (singleCity.id !== nearCityId) {\r\n                    history.push(Paths.CITY.replace(\":id\", nearCityId))\r\n                }\r\n            }\r\n\r\n            if (nearestCitiesCoords?.length > 1) {\r\n                const meanLong = nearestCitiesCoords.reduce((a: Coordinates, b: Coordinates) => (a.long + b.long)) / nearestCitiesCoords.length\r\n                const meanLat = nearestCitiesCoords.reduce((a: Coordinates, b: Coordinates) => (a.lat + b.lat)) / nearestCitiesCoords.length\r\n\r\n                widget.camera\r\n                    .flyTo({\r\n                        destination: Cartesian3.fromDegrees(meanLong, meanLat, 40000)\r\n                    })\r\n            }\r\n        }\r\n    }, [nearestCitiesCoords, widget])\r\n\r\n    return (\r\n\r\n        <CesiumWidget\r\n            ref={widgetRef}\r\n            full\r\n            onClick={(m) => {\r\n                dispatch(startSightseeing())\r\n                const widget = widgetRef.current.cesiumElement\r\n                const scene = widget.scene\r\n\r\n                const cartesian = widget.camera.pickEllipsoid?.(\r\n                    m.position,\r\n                    scene.globe.ellipsoid\r\n                ) ?? null\r\n                if (!cartesian) return\r\n\r\n                const cartographic = Cartographic.fromCartesian(cartesian)\r\n                dispatch(pickCoordinates({\r\n                    long: Mt.toDegrees(cartographic.longitude),\r\n                    lat: Mt.toDegrees(cartographic.latitude\r\n                    )\r\n                }))\r\n\r\n                const newCartesian = Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, nearestCitiesNames.length === 0 ? 20000000 : 20000)\r\n                widget.camera\r\n                    .flyTo({\r\n                        destination: newCartesian,\r\n                        easingFunction: (time: number) => time,\r\n                        duration: 1\r\n                    })\r\n            }}\r\n        >\r\n        </CesiumWidget>\r\n\r\n    )\r\n}\r\n\r\nexport default GlobeBackground","import { useState, useEffect } from \"react\";\r\n\r\nexport const useMediaQuery = (query: string) => {\r\n  const [matches, setMatches] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const media = window.matchMedia(query);\r\n    if (media.matches !== matches) {\r\n      setMatches(media.matches);\r\n    }\r\n    const listener = () => setMatches(media.matches);\r\n    window.addEventListener(\"resize\", listener);\r\n    return () => window.removeEventListener(\"resize\", listener);\r\n  }, [matches, query]);\r\n\r\n  return matches;\r\n};\r\n","import React, { useState } from 'react'\r\nimport { useHistory } from 'react-router'\r\nimport './HomePage.css'\r\n\r\nconst TabCard = ({ options }: { options: any[] }) => {\r\n    const [selectedIndex, setSelectedIndex] = useState(0)\r\n    const history = useHistory()\r\n    return (\r\n        <div className='card-wrapper'>\r\n            <div style={{\r\n                maxWidth: '40em',\r\n                maxHeight: '30em',\r\n                backgroundColor: 'white',\r\n                borderRadius: '20px'\r\n\r\n            }}>\r\n                <div style={{ display: 'flex' }}>\r\n                    {options.map((option, index) => {\r\n                        const className =\r\n                            index === selectedIndex ?\r\n                                'selected-tab'\r\n                                : index === selectedIndex - 1 ?\r\n                                    'tab-before'\r\n                                    : index === selectedIndex + 1 ?\r\n                                        'tab-after'\r\n                                        : index === 0 ?\r\n                                            'left-edge-tab' :\r\n                                            index === options.length - 1 ?\r\n                                                'right-edge-tab' :\r\n                                                'further-tab'\r\n                        return (\r\n                            <div\r\n                                key={index}\r\n                                onClick={() => setSelectedIndex(index)}\r\n                                style={{ width: '100%', textAlign: 'center' }}\r\n                            ><h1 className={className}>\r\n                                    {option.shortTitle}\r\n                                </h1>\r\n                            </div>\r\n                        )\r\n                    })}</div>\r\n                <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }} >\r\n                    <h1 >{options[selectedIndex].title}</h1>\r\n                    <p style={{ width: '95%', textAlign: 'center' }}>{options[selectedIndex].paragraph}</p>\r\n                    <p\r\n                        onClick={() => history.push(options[selectedIndex].address)}\r\n                        className='tab-button'>\r\n                        {options[selectedIndex].emoji}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TabCard","import React, { useEffect } from 'react'\r\nimport Tilt from 'react-parallax-tilt';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { useMediaQuery } from '../hooks/useMediaQuery';\r\nimport { startRevolving } from '../state/actions/globeActions';\r\nimport './HomePage.css'\r\nimport TabCard from './TabCard';\r\nimport * as Paths from '../utils/Paths'\r\n\r\nconst HomePage = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(startRevolving())\r\n    }, [])\r\n\r\n    const Card = ({ title, paragraph, emoji, address }: { title: string, paragraph: string, emoji: string, address: string }) => {\r\n        const history = useHistory()\r\n        const handleRedirect = () => {\r\n            history.push(address)\r\n        }\r\n        return (\r\n            <div onClick={handleRedirect}>\r\n                <Tilt className='tilt-parallax' perspective={1000} glareBorderRadius={'10px'} glareEnable glareMaxOpacity={0.9} glareColor=\"lightblue\" glarePosition=\"all\" scale={1.1} >\r\n                    <div style={{ maxHeight: '30em', maxWidth: '20em', backgroundColor: 'white', borderRadius: '20px' }}>\r\n                        <h1 style={{ transform: 'translateZ(30px)' }}>{title}</h1>\r\n                        <p style={{ transform: 'translateZ(30px)' }}>{paragraph}</p>\r\n                        <p style={{ transform: 'translateZ(30px)', fontSize: '5rem' }}>{emoji}</p>\r\n                    </div>\r\n                </Tilt>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const displayAsSingleCard = useMediaQuery('(max-width: 833px)')\r\n    return (\r\n        <>{\r\n            displayAsSingleCard ?\r\n                <TabCard options={[\r\n                    {\r\n                        shortTitle: 'Dart throw🎯',\r\n                        title: \"Try your luck\",\r\n                        paragraph: \"throw a dart at the globe to try to select destination of your next journey\",\r\n                        emoji: '🎯', address: Paths.DART\r\n                    },\r\n                    {\r\n                        shortTitle: 'Search🔍',\r\n                        title: \"Search by name\",\r\n                        paragraph: \"search for details a holiday destination by name via thesearch engine\",\r\n                        emoji: '🔍',\r\n                        address: Paths.WIDGET\r\n                    }]} />\r\n                : <div className='card-wrapper'>\r\n                    <Card title=\"Try your luck\" paragraph=\"throw a dart at the globe to try to select destination of your next journey\" emoji='🎯' address={Paths.DART} />\r\n                    <Card title=\"Search by name\" paragraph=\"search for details a holiday destination by name via thesearch engine\" emoji='🔍' address={Paths.WIDGET} />\r\n                </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HomePage","import * as ActionTypes from \"../actions/ActionTypes\";\r\n\r\nexport const getSingleCityData = (id: string) => ({\r\n  type: ActionTypes.GET_SINGLE_CITY_DATA,\r\n  payload: id,\r\n});\r\n\r\nexport const singleCityDataFetchSuccess = (\r\n  cityName: string,\r\n  cityCoords: Coordinates,\r\n  cityLink: string\r\n) => ({\r\n  type: ActionTypes.SINGLE_CITY_DATA_FETCH_SUCCEEDED,\r\n  payload: { cityName, cityCoords, cityLink },\r\n});\r\n\r\nexport const singleCityDataFetchFail = () => ({\r\n  type: ActionTypes.SINGLE_CITY_DATA_FETCH_FAILED,\r\n});\r\n\r\nexport const resetSingleCity = () => ({\r\n  type: ActionTypes.RESET_SINGLE_CITY,\r\n});\r\n\r\nexport const extendedCityDataFetchSucceeded = (data: unknown) => ({\r\n  type: ActionTypes.EXTENDED_CITY_DATA_FETCH_SUCCEDEED,\r\n  payload: data,\r\n});\r\n\r\nexport const extendedCityDataFetchFailed = () => ({\r\n  type: ActionTypes.EXTENDED_CITY_DATA_FETCH_FAILED,\r\n});\r\n","import { RootStateOrAny } from \"react-redux\";\r\nimport { createSelector } from \"reselect\";\r\n\r\nconst getNearCityNames = (state: RootStateOrAny) =>\r\n  state.globe.fetchedNearCities.cityNames;\r\nconst getNearCityCoords = (state: RootStateOrAny) =>\r\n  state.globe.fetchedNearCities.cityCoords;\r\nconst getNearCityLinks = (state: RootStateOrAny) =>\r\n  state.globe.fetchedNearCities.cityLinks;\r\n\r\nconst isThereMoreThanOneCityNearby = createSelector(\r\n  getNearCityNames,\r\n  getNearCityCoords,\r\n  getNearCityLinks,\r\n  (names, coords, links) => {\r\n    if (names.length === 1 || coords.length === 1 || links.length === 1)\r\n      return { name: names[0], coords: coords[0], link: links[0] };\r\n    if (names.length === 0 || coords.length === 0 || links.length === 1)\r\n      return false;\r\n    return true;\r\n  }\r\n);\r\n\r\nexport { isThereMoreThanOneCityNearby };\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router'\r\nimport { startSpinning } from '../state/actions/globeActions'\r\nimport { resetSingleCity } from '../state/actions/singleCityActions'\r\nimport { isThereMoreThanOneCityNearby } from '../state/selectors/nearCitySelectors'\r\nimport './DartPage.css'\r\nimport * as Paths from '../utils/Paths'\r\n\r\nconst DraftPage = () => {\r\n    const history = useHistory()\r\n    const isOnlyCity = useSelector(isThereMoreThanOneCityNearby)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(startSpinning())\r\n        dispatch(resetSingleCity())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (typeof isOnlyCity !== 'boolean') {\r\n            const cityId = isOnlyCity.link.split(':').pop().split(\"/\")[0]\r\n            history.push(Paths.CITY.replace(\":id\", cityId))\r\n        }\r\n    }, [isOnlyCity])\r\n\r\n    return (\r\n        <>\r\n            <div className='dart-top-label' > click on globe to throw a dart</div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DraftPage\r\n","import { RootStateOrAny } from \"react-redux\";\r\nimport { createSelector } from \"reselect\";\r\n\r\nconst getUrbanAreaImages = (state: RootStateOrAny) =>\r\n  state.singleCity.extendedCityData.data?._embedded?.[\"city:urban_area\"]\r\n    ?._embedded?.[\"ua:images\"]?.photos ?? false;\r\n\r\nconst getSalaries = (state: RootStateOrAny) =>\r\n  state.singleCity.extendedCityData.data?._embedded?.[\"city:urban_area\"]\r\n    ?._embedded?.[\"ua:salaries\"]?.salaries ?? false;\r\n\r\nconst getCityScores = (state: RootStateOrAny) =>\r\n  state.singleCity.extendedCityData.data?._embedded?.[\"city:urban_area\"]\r\n    ?._embedded?.[\"ua:scores\"]?.salaries ?? false;\r\n\r\nconst areThereCityPhotos = createSelector(getUrbanAreaImages, (images) => {\r\n  if (images)\r\n    return images.map(\r\n      (image: { image: { mobile: string; web: string } }) => image.image\r\n    );\r\n  return false;\r\n});\r\n\r\nconst areThereSalaryInfo = createSelector(getSalaries, (salaries) => {\r\n  return salaries;\r\n});\r\n\r\nconst gareThereCityScores = createSelector(getCityScores, (scores) => {\r\n  if (scores)\r\n    return {\r\n      categories: scores.categories,\r\n      summary: scores.summary,\r\n      teleport_city_score: scores.teleport_city_score,\r\n    };\r\n  return false;\r\n});\r\n\r\nexport { gareThereCityScores, areThereSalaryInfo, areThereCityPhotos };\r\n","import { useEffect } from \"react\";\r\n\r\nexport const useComponentDragable = (\r\n  ref: React.MutableRefObject<HTMLDivElement | null>\r\n) => {\r\n  let pos1 = 0,\r\n    pos2 = 0,\r\n    pos3 = 0,\r\n    pos4 = 0;\r\n\r\n  const dragMouseDown = (e: MouseEvent) => {\r\n    e = e || window.event;\r\n    e.preventDefault();\r\n    pos3 = e.clientX;\r\n    pos4 = e.clientY;\r\n    document.onmouseup = closeDragElement;\r\n    document.onmousemove = elementDrag;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (ref.current) {\r\n      ref.current!.style.bottom = \"0px\";\r\n      ref.current!.onmousedown = dragMouseDown;\r\n    }\r\n    return () => closeDragElement();\r\n    // eslint-disable-next-line\r\n  }, [ref]);\r\n\r\n  const elementDrag = (e: MouseEvent) => {\r\n    e = e || window.event;\r\n    e.preventDefault();\r\n    pos1 = pos3 - e.clientX;\r\n    pos2 = pos4 - e.clientY;\r\n    pos3 = e.clientX;\r\n    pos4 = e.clientY;\r\n    ref.current!.style.top = ref.current!.offsetTop - pos2 + \"px\";\r\n    ref.current!.style.left = ref.current!.offsetLeft - pos1 + \"px\";\r\n  };\r\n\r\n  const closeDragElement = () => {\r\n    document.onmouseup = null;\r\n    document.onmousemove = null;\r\n  };\r\n};\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useComponentDragable } from '../hooks/useComponentDraggable'\r\nimport { useMediaQuery } from '../hooks/useMediaQuery'\r\nimport { areThereCityPhotos } from '../state/selectors/singleCitySelectors'\r\nimport './SingleCityPage.css'\r\n\r\nconst CityPhotoComponent = () => {\r\n    const cityPhotos = useSelector(areThereCityPhotos)\r\n    const isMobile = useMediaQuery('(max-width: 833px)')\r\n\r\n    const containerRef = useRef<HTMLDivElement | null>(null)\r\n\r\n    useComponentDragable(containerRef)\r\n\r\n\r\n    return (\r\n        <>{!isMobile && <div ref={containerRef} className='photo-container'>\r\n            <img src={cityPhotos[0].web} alt=\"\" />\r\n        </div>}</>\r\n    )\r\n}\r\n\r\nexport default CityPhotoComponent","import React, { useRef } from 'react'\r\nimport { RootStateOrAny, useSelector } from 'react-redux'\r\nimport { useComponentDragable } from '../hooks/useComponentDraggable'\r\nimport { useMediaQuery } from '../hooks/useMediaQuery'\r\nimport { areThereSalaryInfo } from '../state/selectors/singleCitySelectors'\r\nimport './SingleCityPage.css'\r\n\r\nconst SalaryListComponent = () => {\r\n\r\n    const cityName: string = useSelector((state: RootStateOrAny) => state.singleCity.fetchedBasicCityData.cityName)\r\n\r\n    const containerRef = useRef<HTMLDivElement | null>(null)\r\n    useComponentDragable(containerRef)\r\n\r\n    const isMobile = useMediaQuery('(max-width: 833px)')\r\n    const salaryInfo = useSelector(areThereSalaryInfo)\r\n    return (\r\n        <>\r\n            {!isMobile &&\r\n                <div ref={containerRef} style={{ borderRadius: '5px', position: 'absolute', zIndex: 10, backgroundColor: 'white', height: '75vh', overflowY: 'auto', }}>\r\n                    <h3 style={{ width: '100%', textAlign: 'center' }}>Salaries in {cityName}</h3>\r\n                    {salaryInfo.map((salary: any, i: number) => (\r\n                        <>\r\n                            <div key={i} style={{ textAlign: 'center' }}>{salary.job.title}</div>\r\n                            <ul style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n                                <li style={{ listStyleType: 'none', color: 'red', fontWeight: 'bold' }}>25%: {Math.round(salary.salary_percentiles.percentile_25)}</li>\r\n                                <li style={{ listStyleType: 'none', color: 'blue', fontWeight: 'bold' }}>50%: {Math.round(salary.salary_percentiles.percentile_50)}</li>\r\n                                <li style={{ listStyleType: 'none', color: 'teal', fontWeight: 'bold' }}>75%: {Math.round(salary.salary_percentiles.percentile_75)}</li>\r\n                            </ul>\r\n                        </>\r\n                    ))\r\n                    }\r\n                </div >}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SalaryListComponent","import React, { useEffect } from 'react'\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from '../hooks/useMediaQuery'\r\nimport { getSingleCityData } from '../state/actions/singleCityActions'\r\nimport { areThereCityPhotos, areThereSalaryInfo/* , gareThereCityScores */ } from '../state/selectors/singleCitySelectors'\r\nimport CityPhotoComponent from './CityPhotoComponent'\r\nimport SalaryListComponent from './SalaryListComponent'\r\nimport './SingleCityPage.css'\r\nimport { pickCoordinates } from '../state/actions/globeActions'\r\n\r\nconst SingleCityPage = ({ id }: { id: string }) => {\r\n    const cityName: string = useSelector((state: RootStateOrAny) => state.singleCity.fetchedBasicCityData.cityName)\r\n    const cityId = useSelector((state: RootStateOrAny) => state.singleCity.id)\r\n    const nearestCitiesLinks = useSelector((state: RootStateOrAny) => state.globe.fetchedNearCities.cityLinks)\r\n    const isMobile = useMediaQuery('(max-width: 833px)')\r\n    const cityPhotos = useSelector(areThereCityPhotos)\r\n    const salaryInfo = useSelector(areThereSalaryInfo)\r\n    const cityCoords = useSelector((state: RootStateOrAny) => state.singleCity.fetchedBasicCityData.cityCoords)\r\n    const currentCoords = useSelector((state: RootStateOrAny) => state.globe.coords)\r\n    //const cityScores = useSelector(gareThereCityScores)\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (cityId !== id) {\r\n            dispatch(getSingleCityData(id))\r\n        }\r\n        const nearCityId = nearestCitiesLinks[0]?.split(\":\")?.pop() ?? \"\"\r\n        if (id !== nearCityId) {\r\n            if (cityCoords.long !== currentCoords.long || cityCoords.lat !== currentCoords.lat)\r\n                dispatch(pickCoordinates({\r\n                    long: cityCoords.long,\r\n                    lat: cityCoords.lat\r\n                }))\r\n        }\r\n    }, [id])\r\n\r\n\r\n    return (\r\n        <>\r\n            <div style={{ fontSize: 'xx-large', position: isMobile ? 'absolute' : 'relative', width: isMobile ? '100%' : '', margin: '0' }} className='dart-top-label' >{cityName}</div>\r\n            {cityPhotos && <CityPhotoComponent />}\r\n            {\r\n                salaryInfo && <SalaryListComponent />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SingleCityPage","import React from 'react'\r\nimport './SingleCityPage.css'\r\n\r\nconst WidgetPage = () => {\r\n    const widget = document.getElementById('teleport-widget')!\r\n    widget.style.display = ''\r\n    widget.style.position = 'absolute'\r\n    widget.style.top = '0';\r\n\r\n    widget.style.marginLeft = 'auto';\r\n    widget.style.marginRight = 'auto';\r\n    widget.style.left = '0';\r\n    widget.style.right = '0';\r\n    widget.style.textAlign = 'center';\r\n    widget.style.zIndex = '2';\r\n\r\n\r\n    return (\r\n        <div ></div>)\r\n}\r\n\r\nexport default WidgetPage","import * as ActionTypes from \"./ActionTypes\";\r\n\r\nexport const saveRecentLocations = (locations: any[]) => ({\r\n  type: ActionTypes.SAVE_RECENT_LOCATIONS,\r\n  payload: locations,\r\n});\r\n\r\nexport const deleteSingleRecentLoaction = (id: string) => ({\r\n  type: ActionTypes.DELETE_SINGLE_RECENT_LOCATION,\r\n  payload: id,\r\n});\r\n\r\nexport const clearRecentsList = () => ({\r\n  type: ActionTypes.CLEAR_RECENTS_LIST,\r\n});\r\n","import React from 'react'\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router'\r\nimport { clearRecentsList, deleteSingleRecentLoaction } from '../state/actions/recentLocationsListActions'\r\nimport * as Paths from '../utils/Paths'\r\n\r\nconst RecentLocationsListPage = () => {\r\n    const history = useHistory()\r\n    const locationsList = useSelector((state: RootStateOrAny) => state.recentLocations.list)\r\n    const dispatch = useDispatch()\r\n    const placeholderStyle = {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        zIndex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: '100vh',\r\n        width: '100vw',\r\n        color: 'white',\r\n        position: 'absolute'\r\n    }\r\n\r\n    return (\r\n        <div style={placeholderStyle as any}><ol>\r\n            {\r\n                locationsList.map((location: any) => <li key={location.id}><span style={{ cursor: 'pointer' }} onClick={() => history.push(Paths.CITY.replace(\":id\", location.id))}>{location.fetchedBasicCityData.cityName}</span> - {location.userName} <span style={{ cursor: 'pointer' }} onClick={() => { dispatch(deleteSingleRecentLoaction(location.id)) }}>🗑</span></li>)\r\n            }\r\n        </ol>\r\n            <button className='styled-button' onClick={() => dispatch(clearRecentsList())}>clear list</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecentLocationsListPage","import React from 'react';\r\nimport '../App.css';\r\nimport SplashScreenHeader from './SplashScreenHeader';\r\nimport GlobeBackground from './GlobeBackground';\r\nimport { Switch, Route, withRouter, Redirect } from 'react-router-dom'\r\nimport HomePage from './HomePage'\r\nimport DraftPage from './DartPage';\r\nimport SingleCityPage from './SingleCityPage';\r\nimport WidgetPage from './WidgetPage';\r\nimport RecentLocationsListPage from './RecentLocationsListPage';\r\nimport * as Paths from '../utils/Paths'\r\n\r\nfunction MainComponent() {\r\n\r\n    const SingleCityPageById = ({ match }: { match: any }) => {\r\n        return <SingleCityPage id={match.params.id} />\r\n    }\r\n\r\n\r\n    return (\r\n        < >\r\n            <SplashScreenHeader />\r\n            <Switch>\r\n                <Route exact path={Paths.DART} component={DraftPage} />\r\n                <Route exact path={Paths.WIDGET} component={WidgetPage} />\r\n                <Route exact path={Paths.CITY}\r\n                    component={SingleCityPageById}\r\n                />\r\n                <Route exact path={Paths.RECENT_LIST} component={RecentLocationsListPage} />\r\n                <Route exact path={Paths.HOME} component={HomePage} />\r\n                <Redirect to={Paths.HOME} />\r\n            </Switch>\r\n            <GlobeBackground />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(MainComponent);\r\n","import * as ActionTypes from \"../actions/ActionTypes\";\r\nimport { Action } from \"../../types/ActionType\";\r\n\r\nconst initNearbyCities = {\r\n  isLoading: false,\r\n  errMess: \"\",\r\n  cityNames: [] as string[],\r\n  cityCoords: [] as Coordinates[],\r\n  cityLinks: [] as string[],\r\n};\r\n\r\nexport const globeReducer = (\r\n  state = {\r\n    fastSpinning: false,\r\n    slowRevolving: true,\r\n    coords: { long: 0, lat: 0 } as Coordinates,\r\n    fetchedNearCities: initNearbyCities,\r\n  },\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionTypes.START_SPINNING:\r\n      return {\r\n        ...state,\r\n        fastSpinning: true,\r\n        slowRevolving: false,\r\n        fetchedNearCities: initNearbyCities,\r\n      };\r\n    case ActionTypes.START_REVOLVING:\r\n      return {\r\n        ...state,\r\n        fastSpinning: false,\r\n        slowRevolving: true,\r\n      };\r\n    case ActionTypes.START_SIGHTSEEING:\r\n      return {\r\n        ...state,\r\n        fastSpinning: false,\r\n        slowRevolving: false,\r\n      };\r\n    case ActionTypes.PICK_COORDINATES:\r\n      return {\r\n        ...state,\r\n        coords: action.payload,\r\n      };\r\n    case ActionTypes.NO_NEARBY_CITIES:\r\n      return {\r\n        ...state,\r\n        fetchedNearCities: initNearbyCities,\r\n      };\r\n    case ActionTypes.NEARBY_CITIES_FETCH_FAILED:\r\n      return {\r\n        ...state,\r\n        fetchedNearCities: {\r\n          ...initNearbyCities,\r\n          errMess: \"failed to fetch\",\r\n        },\r\n      };\r\n    case ActionTypes.NEARBY_CITIES_FETCH_SUCCEEDED:\r\n      return {\r\n        ...state,\r\n        fetchedNearCities: {\r\n          ...initNearbyCities,\r\n          cityNames: action.payload.cityNames,\r\n          cityCoords: action.payload.cityCoords,\r\n          cityLinks: action.payload.cityLinks,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const fetchNearestCitiesData = async (coords: Coordinates) => {\r\n  return fetch(\r\n    `https://api.teleport.org/api/locations/${coords.lat},${coords.long}/?embed=location%3Anearest-cities%2Flocation%3Anearest-city`\r\n  ).then((response) => response.json());\r\n};\r\n","import {call,StrictEffect} from 'redux-saga/effects'\r\n\r\nfunction* crashHandlingDecoratorSaga(\r\n    sagaToBecalled:any,\r\n    ...args:any[]\r\n):Generator<StrictEffect,any,any>{\r\n    try{\r\n        yield call(sagaToBecalled,...args);\r\n    }catch(error){\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nexport default crashHandlingDecoratorSaga","import {\r\n  call,\r\n  put,\r\n  select,\r\n  StrictEffect,\r\n  takeLatest,\r\n} from \"redux-saga/effects\";\r\nimport { fetchNearestCitiesData } from \"../../api/nearestCityApi\";\r\nimport * as ActionTypes from \"../actions/ActionTypes\";\r\nimport {\r\n  getNearesCitiesFailed,\r\n  getNearesCitiesSuceeded,\r\n  noCitiesFoundInNearby,\r\n} from \"../actions/globeActions\";\r\nimport { singleCityDataFetchSuccess } from \"../actions/singleCityActions\";\r\nimport crashHandlingDecoratorSaga from \"./crashHandlingDecoratorSaga\";\r\n\r\nfunction* throwDartSaga() {\r\n  yield takeLatest(\r\n    ActionTypes.PICK_COORDINATES,\r\n    crashHandlingDecoratorSaga,\r\n    throwDart\r\n  );\r\n}\r\n\r\nfunction* throwDart(): Generator<StrictEffect, any, any> {\r\n  const Coords = yield select((state) => state.globe.coords);\r\n  const nearestCitiesData = yield call(fetchNearestCitiesData, Coords);\r\n  const cityNames: string[] = [];\r\n  const citiesCoords: Coordinates[] = [];\r\n  const cityLinks: string[] = [];\r\n  if (nearestCitiesData) {\r\n    nearestCitiesData._embedded[\"location:nearest-cities\"]?.forEach(\r\n      (nearCityData: any) => {\r\n        cityLinks.push(nearCityData._links[\"location:nearest-city\"].href);\r\n        cityNames.push(nearCityData._links[\"location:nearest-city\"].name);\r\n        const latlon =\r\n          nearCityData._embedded[\"location:nearest-city\"].location.latlon;\r\n        citiesCoords.push({ long: latlon.longitude, lat: latlon.latitude });\r\n      }\r\n    );\r\n\r\n    if (cityNames.length === 0 || citiesCoords.length === 0) {\r\n      yield put(noCitiesFoundInNearby());\r\n      return;\r\n    }\r\n    yield put(getNearesCitiesSuceeded(cityNames, citiesCoords, cityLinks));\r\n    yield call(checkIfOnlyCity, cityNames, citiesCoords, cityLinks);\r\n  } else {\r\n    yield put(getNearesCitiesFailed());\r\n  }\r\n}\r\n\r\nfunction* checkIfOnlyCity(\r\n  cityNames: string[],\r\n  citiesCoords: Coordinates[],\r\n  cityLinks: string[]\r\n): Generator<StrictEffect, any, any> {\r\n  if (\r\n    cityNames.length === 1 ||\r\n    citiesCoords.length === 1 ||\r\n    cityLinks.length === 1\r\n  )\r\n    yield put(\r\n      singleCityDataFetchSuccess(cityNames[0], citiesCoords[0], cityLinks[0])\r\n    );\r\n}\r\n\r\nexport default throwDartSaga;\r\n","import { put, select, StrictEffect, takeLatest } from \"redux-saga/effects\";\r\nimport * as ActionTypes from \"../actions/ActionTypes\";\r\nimport { saveRecentLocations } from \"../actions/recentLocationsListActions\";\r\n\r\nfunction* recentLocationListSaga() {\r\n  yield takeLatest(\r\n    ActionTypes.SINGLE_CITY_DATA_FETCH_SUCCEEDED,\r\n    saveRecentLocation\r\n  );\r\n}\r\n\r\nfunction* saveRecentLocation(): Generator<StrictEffect, any, any> {\r\n  const locations = yield select((state) => state.recentLocations.list);\r\n  const userName = yield select((state) => state.splashScreen.userName);\r\n  const latestCity = yield select((state) => state.singleCity);\r\n  let tmpLocations = JSON.parse(JSON.stringify(locations));\r\n  //case when there is already thius location on the list\r\n  if (locations.find((city: any) => city.id === latestCity.id))\r\n    tmpLocations = locations.filter((city: any) => city.id !== latestCity.id);\r\n  //case when there are over 50 saved locations\r\n  if (locations.length >= 50) tmpLocations = locations.slice(0, -1);\r\n\r\n  tmpLocations.unshift({ ...latestCity, userName });\r\n\r\n  const latestCityId = latestCity.fetchedBasicCityData.cityLink\r\n    .split(\":\")\r\n    .pop()\r\n    .split(\"/\")[0];\r\n  if (latestCityId === latestCity.id)\r\n    yield put(saveRecentLocations(tmpLocations));\r\n  return;\r\n}\r\n\r\nexport default recentLocationListSaga;\r\n","export const fetchBasicCityData = async (\r\n  cityId: string,\r\n  embedLinks?: string\r\n) => {\r\n  let embed = \"\";\r\n  if (embedLinks) embed = embed + embedLinks;\r\n  return fetch(\r\n    `https://api.teleport.org/api/cities/geonameid:${cityId}/${embed}`\r\n  ).then((response) => response.json());\r\n};\r\n","import {\r\n  all,\r\n  call,\r\n  put,\r\n  select,\r\n  StrictEffect,\r\n  takeLeading,\r\n} from \"redux-saga/effects\";\r\nimport { fetchBasicCityData } from \"../../api/singleCityApi\";\r\nimport * as ActionTypes from \"../actions/ActionTypes\";\r\nimport {\r\n  extendedCityDataFetchFailed,\r\n  extendedCityDataFetchSucceeded,\r\n  singleCityDataFetchFail,\r\n  singleCityDataFetchSuccess,\r\n} from \"../actions/singleCityActions\";\r\nimport crashHandlingDecoratorSaga from \"./crashHandlingDecoratorSaga\";\r\n\r\nfunction* getSingleCityDataSaga() {\r\n  yield takeLeading(\r\n    ActionTypes.GET_SINGLE_CITY_DATA,\r\n    crashHandlingDecoratorSaga,\r\n    getSingleCity\r\n  );\r\n}\r\n\r\nfunction* getSingleCity(): Generator<StrictEffect, any, any> {\r\n  const cityId = yield select((state) => state.singleCity.id);\r\n  const cityDataResopnse = yield call(fetchBasicCityData, cityId);\r\n  if (cityDataResopnse) {\r\n    yield all([\r\n      call(getBasicCityInfo, cityDataResopnse),\r\n      call(getAllPossibleEmbededData, cityDataResopnse),\r\n    ]);\r\n  } else {\r\n    yield put(singleCityDataFetchFail());\r\n  }\r\n}\r\n\r\nfunction* getBasicCityInfo(\r\n  cityDataResopnse: any\r\n): Generator<StrictEffect, any, any> {\r\n  const cityLink = yield select(\r\n    (state) => state.singleCity.fetchedBasicCityData.cityLink\r\n  );\r\n  const cityName = yield select(\r\n    (state) => state.singleCity.fetchedBasicCityData.cityName\r\n  );\r\n  const cityCoords = yield select(\r\n    (state) => state.singleCity.fetchedBasicCityData.cityCoords\r\n  );\r\n  if (\r\n    cityLink.length < 1 ||\r\n    cityName.length < 1 ||\r\n    !cityCoords.long ||\r\n    !cityCoords.lat\r\n  ) {\r\n    const latlon = cityDataResopnse.location.latlon;\r\n    yield put(\r\n      singleCityDataFetchSuccess(\r\n        cityDataResopnse.name,\r\n        { long: latlon.longitude, lat: latlon.latitude },\r\n        cityDataResopnse._links.self.href\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nfunction* getAllPossibleEmbededData(\r\n  cityDataResopnse: any\r\n): Generator<StrictEffect, any, any> {\r\n  const cityId = yield select((state) => state.singleCity.id);\r\n\r\n  const namesToEmbed = Object.keys(cityDataResopnse._links).filter((link) =>\r\n    link.includes(\"city\")\r\n  );\r\n\r\n  let embed = \"\";\r\n  if (namesToEmbed && namesToEmbed.length > 0) {\r\n    namesToEmbed.forEach((link, i) => {\r\n      if (i === 0) embed = embed + \"?embed=\";\r\n      else embed = embed + \"&embed=\";\r\n      if (link.includes(\"urban_area\")) {\r\n        embed =\r\n          embed +\r\n          \"city:urban_area/ua:images&embed=city:urban_area/ua:salaries&embed=city:urban_area/ua:scores\";\r\n      } else embed = embed + link;\r\n    });\r\n  }\r\n\r\n  const enrichedCityDataResopnse = yield call(\r\n    fetchBasicCityData,\r\n    cityId,\r\n    embed\r\n  );\r\n\r\n  if (enrichedCityDataResopnse) {\r\n    yield put(extendedCityDataFetchSucceeded(enrichedCityDataResopnse));\r\n  } else {\r\n    yield put(extendedCityDataFetchFailed());\r\n  }\r\n}\r\n\r\nexport default getSingleCityDataSaga;\r\n","import { all } from \"redux-saga/effects\";\r\nimport throwDartSaga from \"./dartSaga\";\r\nimport recentLocationListSaga from \"./recentLocationsListSaga\";\r\nimport getSingleCityDataSaga from \"./singleCityDataSaga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    throwDartSaga(),\r\n    getSingleCityDataSaga(),\r\n    recentLocationListSaga(),\r\n  ]);\r\n}\r\n","import * as ActionTypes from \"../actions/ActionTypes\";\r\nimport { Action } from \"../../types/ActionType\";\r\n\r\nconst initFetchedBasicCityData = {\r\n  isLoading: false,\r\n  errMess: \"\",\r\n  cityName: \"\",\r\n  cityCoords: {},\r\n  cityLink: \"\",\r\n};\r\n\r\nconst initialExtendedData = {\r\n  isLoading: false,\r\n  errMess: \"\",\r\n  data: {},\r\n};\r\n\r\nexport const singleCityDataReducer = (\r\n  state = {\r\n    id: \"\",\r\n    fetchedBasicCityData: initFetchedBasicCityData,\r\n    extendedCityData: initialExtendedData,\r\n  },\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionTypes.GET_SINGLE_CITY_DATA: {\r\n      const curentLinkId =\r\n        state.fetchedBasicCityData.cityLink\r\n          .split(\":\")\r\n          .pop()\r\n          ?.split?.(\"/\")?.[0] ?? \"\";\r\n\r\n      return {\r\n        ...state,\r\n        id: action.payload,\r\n        fetchedBasicCityData:\r\n          curentLinkId === action.payload\r\n            ? state.fetchedBasicCityData\r\n            : { ...initFetchedBasicCityData, isloading: true },\r\n      };\r\n    }\r\n    case ActionTypes.SINGLE_CITY_DATA_FETCH_SUCCEEDED:\r\n      return {\r\n        ...state,\r\n        fetchedBasicCityData: {\r\n          ...initFetchedBasicCityData,\r\n          cityName: action.payload.cityName,\r\n          cityCoords: action.payload.cityCoords,\r\n          cityLink: action.payload.cityLink,\r\n        },\r\n      };\r\n    case ActionTypes.SINGLE_CITY_DATA_FETCH_FAILED:\r\n      return {\r\n        ...state,\r\n        sfetchedBasicCityData: {\r\n          ...initFetchedBasicCityData,\r\n          errMess: \"failed to fetch basic city info\",\r\n        },\r\n      };\r\n    case ActionTypes.RESET_SINGLE_CITY: {\r\n      return {\r\n        ...state,\r\n        id: \"\",\r\n        fetchedBasicCityData: initFetchedBasicCityData,\r\n      };\r\n    }\r\n    case ActionTypes.EXTENDED_CITY_DATA_FETCH_SUCCEDEED:\r\n      return {\r\n        ...state,\r\n\r\n        extendedCityData: {\r\n          ...initialExtendedData,\r\n          data: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.EXTENDED_CITY_DATA_FETCH_FAILED:\r\n      return {\r\n        ...state,\r\n        extendedCityData: {\r\n          ...initialExtendedData,\r\n          errMess: \"could not fetch extended data\",\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { splashScreenReducer } from \"./state/reducers/SplashScreenReducer\";\r\nimport { globeReducer } from \"./state/reducers/GlobeReducer\";\r\nimport rootSaga from \"./state/sagas/rootSaga\";\r\nimport { singleCityDataReducer } from \"./state/reducers/SingleCityData\";\r\nimport { recentLocationsListReducer } from \"./state/reducers/RecentLocationsList\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  debug: true,\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  splashScreen: splashScreenReducer,\r\n  globe: globeReducer,\r\n  singleCity: singleCityDataReducer,\r\n  recentLocations: recentLocationsListReducer,\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst saga = createSagaMiddleware();\r\n\r\nexport const ConfigureStore = () => {\r\n  const composeEnhancers = composeWithDevTools({ trace: true, traceLimit: 25 });\r\n  const store = createStore(\r\n    persistedReducer,\r\n    composeEnhancers(applyMiddleware(saga))\r\n  );\r\n  const persistor = persistStore(store);\r\n  saga.run(rootSaga);\r\n\r\n  if ((window as Window & typeof globalThis & { Cypress: any }).Cypress) {\r\n    (window as Window & typeof globalThis & { store: any }).store = store;\r\n  }\r\n\r\n  return { store, persistor };\r\n};\r\n","import * as ActionTypes from \"../actions/ActionTypes\";\r\nimport { Action } from \"../../types/ActionType\";\r\n\r\nexport const splashScreenReducer = (\r\n  state = {\r\n    userName: \"\",\r\n    skippedIntro: false,\r\n  },\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SAVE_USER_NAME:\r\n      return {\r\n        ...state,\r\n        userName: action.payload,\r\n        skippedIntro: true,\r\n      };\r\n    case ActionTypes.SKIP_INTRO:\r\n      return {\r\n        ...state,\r\n        skippedIntro: true,\r\n      };\r\n    case ActionTypes.CHANGE_NAME:\r\n      return {\r\n        ...state,\r\n        skippedIntro: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as ActionTypes from \"../actions/ActionTypes\";\r\nimport { Action } from \"../../types/ActionType\";\r\n\r\nexport const recentLocationsListReducer = (\r\n  state = {\r\n    list: [],\r\n  },\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SAVE_RECENT_LOCATIONS:\r\n      return {\r\n        ...state,\r\n        list: action.payload,\r\n      };\r\n    case ActionTypes.DELETE_SINGLE_RECENT_LOCATION:\r\n      return {\r\n        ...state,\r\n        list: state.list.filter((city: any) => city.id !== action.payload),\r\n      };\r\n    case ActionTypes.CLEAR_RECENTS_LIST:\r\n      return {\r\n        ...state,\r\n        list: [],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react'\r\n\r\nconst ErrorFallbackComponent = ({ error, resetErrorBoundary }: any) => {\r\n    const resetApp = () => {\r\n        resetErrorBoundary();\r\n        if (caches) {\r\n            caches\r\n                .keys()\r\n                .then(names => {\r\n                    for (const name of names) {\r\n                        caches.delete(name)\r\n                    }\r\n                })\r\n        }\r\n        document.location.href = '/'\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", justifyContent: 'center', alignItems: 'center', height: '100%' }}>\r\n            <div role=\"alert\">\r\n                <h1 style={{ textAlign: 'center' }}>\r\n                    Something Went Wrong 😕\r\n                </h1>\r\n                <pre style={{ color: 'red' }}>{error.message}</pre>\r\n                <button onClick={resetApp}>try again</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorFallbackComponent","import React from 'react';\nimport './App.css';\nimport MainComponent from './components/MainComponent';\nimport { ErrorBoundary } from 'react-error-boundary'\nimport { Provider as ReduxProvider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { ConfigureStore } from './configureStore';\nimport ErrorFallbackComponent from './components/ErrorFallbackComponent'\n\nconst { store, persistor } = ConfigureStore()\n\nfunction App() {\n  return (\n    <ErrorBoundary\n      FallbackComponent={ErrorFallbackComponent}\n      onReset={\n        async () => {\n          await persistor.purge()\n        }\n      }\n    >\n      <ReduxProvider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <BrowserRouter>\n            <MainComponent />\n          </BrowserRouter>\n        </PersistGate>\n      </ReduxProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport './Spinner.css'\r\n\r\nconst LowSizeSpinner = () => (\r\n    <div className=\"container\">\r\n        <div className=\"spinner\">\r\n            <div />\r\n            <div />\r\n        </div>\r\n    </div>\r\n)\r\nexport default LowSizeSpinner","import i18n from \"i18next\";\r\nimport Backend from \"i18next-http-backend\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\ni18n\r\n  .use(Backend)\r\n  .use(LanguageDetector)\r\n  .use(initReactI18next)\r\n  .init({\r\n    fallbackLng: \"en\",\r\n    debug: process.env.NODE_ENV === \"development\",\r\n    detection: {\r\n      order: [\"querystring\", \"cookie\", \"header\"],\r\n      lookupCookie: \"lang\",\r\n      lookupQuerystring: \"lang\",\r\n      caches: [\"cookie\"],\r\n    },\r\n    interpolation: {\r\n      escapeValue: false,\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport LowSizeSpinner from './components/LowSizeSpinner';\nimport './utils/i18n'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback={<LowSizeSpinner />}>\n      <App />\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}