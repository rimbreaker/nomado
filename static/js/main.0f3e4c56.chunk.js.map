{"version":3,"sources":["../external \"Cesium\"","state/actions/ActionTypes.ts","hooks/useDetectClickAway.ts","utils/Paths.ts","state/actions/singleCityActions.ts","utils/Constants.ts","pages/widgetPage/WidgetPageCategoryPicker.tsx","state/actions/widgetPageActions.ts","pages/startPage/AccountBadge.tsx","state/actions/SplashScreenActions.ts","pages/startPage/SplashScreenHeader.tsx","state/actions/globeActions.ts","globalComponents/GlobeBackground.tsx","pages/homePage/TabCard.tsx","pages/homePage/HomePageTabBody.tsx","pages/homePage/HomePageCard.tsx","pages/homePage/HomePage.tsx","hooks/useMediaQuery.ts","state/selectors/nearCitySelectors.ts","pages/dartPage/DartPage.tsx","state/selectors/singleCitySelectors.ts","pages/singleCityPage/SingleCityTabCard.tsx","pages/singleCityPage/WidgetTab.tsx","pages/singleCityPage/BasicInfoTab.tsx","pages/singleCityPage/SingleCityPage.tsx","pages/widgetPage/WidgetPage.tsx","state/actions/recentLocationsListActions.ts","pages/latestPlacesPage/RecentLocationsListPage.tsx","globalComponents/MainComponent.tsx","state/reducers/GlobeReducer.ts","api/nearestCityApi.ts","state/sagas/crashHandlingDecoratorSaga.ts","state/sagas/dartSaga.ts","state/sagas/recentLocationsListSaga.ts","api/singleCityApi.ts","state/sagas/singleCityDataSaga.ts","state/sagas/rootSaga.ts","state/reducers/SingleCityData.ts","configureStore.ts","state/reducers/SplashScreenReducer.ts","state/reducers/RecentLocationsList.ts","state/reducers/WidgetPageReducer.ts","globalComponents/ErrorFallbackComponent.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","globalComponents/LowSizeSpinner.tsx","utils/i18n.ts","index.tsx"],"names":["module","exports","Cesium","SAVE_USER_NAME","SKIP_INTRO","CHANGE_NAME","PICK_COORDINATES","NO_NEARBY_CITIES","NEARBY_CITIES_FETCH_SUCCEEDED","NEARBY_CITIES_FETCH_FAILED","GET_SINGLE_CITY_DATA","SINGLE_CITY_DATA_FETCH_SUCCEEDED","SINGLE_CITY_DATA_FETCH_FAILED","RESET_SINGLE_CITY","EXTENDED_CITY_DATA_FETCH_SUCCEDEED","EXTENDED_CITY_DATA_FETCH_FAILED","SAVE_RECENT_LOCATIONS","DELETE_SINGLE_RECENT_LOCATION","CLEAR_RECENTS_LIST","SET_WIDGET_PAGE_CATEGORY","useDetectClickAway","ref","callback","useEffect","ecentHandler","e","current","target","contains","document","addEventListener","removeEventListener","HOME","DART","CITY","RECENT_LIST","WIDGET","singleCityDataFetchSuccess","cityName","cityCoords","cityLink","type","ActionTypes","payload","ALL_WIDGET_CATEGORIES","WIDGET_TABS_EMOJIS","WELCOME_MESSAGE","WidgetPageCategoryPicker","useState","open","setOpen","dropdownListRef","useRef","dispatch","useDispatch","currentCategory","useSelector","state","widgetPage","category","className","onClick","prev","style","display","map","id","setWidgetPageCategory","AccountBadge","name","splashScreen","userName","history","useHistory","location","pathname","Paths","push","src","alt","SplashScreenHeader","hasTypingFinished","setHasTypingFinished","showSkipButton","setShowSkipButton","setName","inputRef","skipWrapperRef","topWrapperRef","skippedIntro","showNavbar","setShowNavbar","transitionNavbarToSplash","transitionSplashToNavbar","wrapper","height","boxShadow","skipWrapper","opacity","marginTop","setTimeout","options","strings","typeSpeed","backSpeed","attr","bindInputFocusEvents","onComplete","focus","Typed","start","transition","width","borderBottom","value","onChange","length","pickCoordinates","coords","getNearesCitiesSuceeded","cityNames","cityLinks","GlobeBackground","widgetRef","nearestCitiesCoords","globe","fetchedNearCities","nearestCitiesNames","nearestCitiesLinks","singleCity","widget","setWidget","cesiumElement","startRotating","longtitude","speed","camera","flyTo","destination","Cartesian3","fromDegrees","easingFunction","time","duration","complete","RegExp","split","test","long","lat","nearCityId","pop","replace","meanLong","reduce","a","b","meanLat","full","m","scene","cartesian","pickEllipsoid","position","ellipsoid","cartographic","Cartographic","fromCartesian","Mt","toDegrees","longitude","latitude","newCartesian","fromRadians","TabCard","selectedIndex","setSelectedIndex","option","index","shortTitle","body","HomePageTabBody","title","paragraph","address","emoji","HomePageCard","perspective","glareBorderRadius","glareEnable","glareMaxOpacity","glareColor","glarePosition","scale","HomePage","isMobile","query","matches","setMatches","media","window","matchMedia","listener","useMediaQuery","isThereMoreThanOneCityNearby","createSelector","names","links","link","DraftPage","isOnlyCity","cityId","isThereCitySlug","extendedCityData","data","_embedded","slug","SingleCityTabCard","WidgetTab","urbanArea","BasicInfoTab","extendedData","alternateNames","alternate_names","full_name","population","currency_code","iana_name","SingleCityPage","fetchedBasicCityData","currentCoords","citySlug","getSingleCityData","toUpperCase","concat","WidgetPage","saveRecentLocations","locations","RecentLocationsListPage","locationsList","recentLocations","list","withRouter","exact","path","component","match","params","to","initNearbyCities","isLoading","errMess","fetchNearestCitiesData","fetch","then","response","json","crashHandlingDecoratorSaga","sagaToBecalled","args","call","console","error","throwDartSaga","throwDart","checkIfOnlyCity","takeLatest","select","Coords","nearestCitiesData","citiesCoords","forEach","nearCityData","_links","href","latlon","put","recentLocationListSaga","saveRecentLocation","latestCity","tmpLocations","JSON","parse","stringify","find","city","filter","slice","unshift","fetchBasicCityData","embedLinks","embed","getSingleCityDataSaga","getSingleCity","getBasicCityInfo","getAllPossibleEmbededData","takeLeading","cityDataResopnse","all","self","namesToEmbed","Object","keys","includes","i","enrichedCityDataResopnse","rootSaga","initFetchedBasicCityData","initialExtendedData","persistConfig","key","storage","debug","rootReducer","combineReducers","action","curentLinkId","isloading","sfetchedBasicCityData","persistedReducer","persistReducer","saga","createSagaMiddleware","ErrorFallbackComponent","resetErrorBoundary","role","message","caches","delete","composeEnhancers","composeWithDevTools","trace","traceLimit","store","createStore","applyMiddleware","persistor","persistStore","run","Cypress","ConfigureStore","App","FallbackComponent","onReset","purge","loading","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","LowSizeSpinner","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","process","detection","order","lookupCookie","lookupQuerystring","interpolation","escapeValue","ReactDOM","render","StrictMode","fallback","getElementById","URL","origin","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0f3e4c56.chunk.js","sourcesContent":["module.exports = Cesium;","export const SAVE_USER_NAME = \"SAVE_USER_NAME\";\r\nexport const SKIP_INTRO = \"SKIP_INTRO\";\r\nexport const CHANGE_NAME = \"CHANGE_NAME\";\r\n\r\nexport const PICK_COORDINATES = \"PICK_COORDINATES\";\r\n\r\nexport const NO_NEARBY_CITIES = \"NO_NEARBY_CITIES\";\r\nexport const NEARBY_CITIES_FETCH_SUCCEEDED = \"NEARBY_CITIES_FETCH_SUCCEEDED\";\r\nexport const NEARBY_CITIES_FETCH_FAILED = \"NEARBY_CITIES_FETCH_FAILED\";\r\n\r\nexport const GET_SINGLE_CITY_DATA = \"GET_SINGLE_CITY_DATA\";\r\nexport const SINGLE_CITY_DATA_FETCH_SUCCEEDED =\r\n  \"SINGLE_CITY_DATA_FETCH_SUCCEEDED\";\r\nexport const SINGLE_CITY_DATA_FETCH_FAILED = \"SINGLE_CITY_DATA_FETCH_FAILED\";\r\nexport const RESET_SINGLE_CITY = \"RESET_SINGLE_CITY\";\r\nexport const EXTENDED_CITY_DATA_FETCH_SUCCEDEED =\r\n  \"EXTENDED_CITY_DATA_FETCH_SUCCEDEED\";\r\nexport const EXTENDED_CITY_DATA_FETCH_FAILED =\r\n  \"EXTENDED_CITY_DATA_FETCH_FAILED\";\r\n\r\nexport const SAVE_RECENT_LOCATIONS = \"SAVE_RECENT_LOCATIONS\";\r\nexport const DELETE_SINGLE_RECENT_LOCATION = \"DELETE_SINGLE_RECENT_LOCATION\";\r\nexport const CLEAR_RECENTS_LIST = \"CLEAR_RECENTS_LIST\";\r\n\r\nexport const SET_WIDGET_PAGE_CATEGORY = \"SET_WIDGET_PAGE_CATEGORY\";\r\n","import { useEffect, MutableRefObject } from \"react\";\r\n\r\nexport const useDetectClickAway = (\r\n  ref: MutableRefObject<any>,\r\n  callback: () => void\r\n) => {\r\n  useEffect(() => {\r\n    const ecentHandler = (e: MouseEvent) => {\r\n      if (\r\n        ref.current &&\r\n        e.target &&\r\n        !ref.current.contains(e.target) &&\r\n        ref.current !== e.target\r\n      ) {\r\n        callback();\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", ecentHandler);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", ecentHandler);\r\n    };\r\n  }, [ref, callback]);\r\n};\r\n","export const HOME = \"/nomado\";\r\nexport const DART = \"/nomado/dart\";\r\nexport const CITY = \"/nomado/city/:id\";\r\nexport const RECENT_LIST = \"/nomado/recentlist\";\r\nexport const WIDGET = \"/nomado/widget\";\r\n","import * as ActionTypes from \"../actions/ActionTypes\";\r\n\r\nexport const getSingleCityData = (id: string) => ({\r\n  type: ActionTypes.GET_SINGLE_CITY_DATA,\r\n  payload: id,\r\n});\r\n\r\nexport const singleCityDataFetchSuccess = (\r\n  cityName: string,\r\n  cityCoords: Coordinates,\r\n  cityLink: string\r\n) => ({\r\n  type: ActionTypes.SINGLE_CITY_DATA_FETCH_SUCCEEDED,\r\n  payload: { cityName, cityCoords, cityLink },\r\n});\r\n\r\nexport const singleCityDataFetchFail = () => ({\r\n  type: ActionTypes.SINGLE_CITY_DATA_FETCH_FAILED,\r\n});\r\n\r\nexport const resetSingleCity = () => ({\r\n  type: ActionTypes.RESET_SINGLE_CITY,\r\n});\r\n\r\nexport const extendedCityDataFetchSucceeded = (data: unknown) => ({\r\n  type: ActionTypes.EXTENDED_CITY_DATA_FETCH_SUCCEDEED,\r\n  payload: data,\r\n});\r\n\r\nexport const extendedCityDataFetchFailed = () => ({\r\n  type: ActionTypes.EXTENDED_CITY_DATA_FETCH_FAILED,\r\n});\r\n","export const ALL_WIDGET_CATEGORIES = [\r\n  \"scores\",\r\n  \"costs\",\r\n  \"salaries\",\r\n  \"crime\",\r\n  \"education\",\r\n  \"tolerance\",\r\n  \"weather\",\r\n  \"outdoors\",\r\n  \"startup\",\r\n];\r\n\r\nexport const WIDGET_TABS_EMOJIS = [\r\n  \"😃\",\r\n  \"💸\",\r\n  \"💹\",\r\n  \"🦹‍♂️\",\r\n  \"🏫\",\r\n  \"🌈\",\r\n  \"🌞\",\r\n  \"🗻\",\r\n  \"💻\",\r\n];\r\n\r\nexport const WELCOME_MESSAGE = [\r\n  \"Welcome digital nomad\",\r\n  \"what do they call you?\",\r\n];\r\n","import React, { useRef, useState } from 'react'\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux'\r\nimport { useDetectClickAway } from '../../hooks/useDetectClickAway'\r\nimport { setWidgetPageCategory } from '../../state/actions/widgetPageActions'\r\nimport { ALL_WIDGET_CATEGORIES } from '../../utils/Constants'\r\nimport './WidgetPageStyles.css'\r\n\r\nconst WidgetPageCategoryPicker = () => {\r\n    const [open, setOpen] = useState(false)\r\n    const dropdownListRef = useRef(null)\r\n    const dispatch = useDispatch()\r\n    const currentCategory = useSelector((state: RootStateOrAny) => state.widgetPage.category)\r\n\r\n    useDetectClickAway(dropdownListRef, () => setOpen(false))\r\n\r\n    return (\r\n        <div ref={dropdownListRef} className='category-dropdown' >\r\n            <div\r\n                className='category-dropdown-label'\r\n                onClick={\r\n                    () => setOpen(prev => !prev)\r\n                }>category: {currentCategory}{open ? '🔼' : '🔽'}\r\n            </div>\r\n            <ul className='category-dropdown-list' style={{\r\n                display: open ? '' : 'none',\r\n            }}>\r\n                {ALL_WIDGET_CATEGORIES.map(category => (\r\n                    <li id={category} key={category} className='dropdown-item' onClick={() => dispatch(setWidgetPageCategory(category))}>{category}</li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WidgetPageCategoryPicker","import { WidgetCategory } from \"../../types/WidgetCategory\";\r\nimport * as ActionTypes from \"./ActionTypes\";\r\n\r\nexport const setWidgetPageCategory = (category: WidgetCategory) => ({\r\n  type: ActionTypes.SET_WIDGET_PAGE_CATEGORY,\r\n  payload: category,\r\n});\r\n","import React, { useRef, useState } from 'react'\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router'\r\nimport { useDetectClickAway } from '../../hooks/useDetectClickAway'\r\nimport { changeName } from '../../state/actions/SplashScreenActions'\r\nimport './StartPage.css'\r\nimport * as Paths from '../../utils/Paths'\r\nimport { resetSingleCity } from '../../state/actions/singleCityActions'\r\nimport WidgetPageCategoryPicker from '../widgetPage/WidgetPageCategoryPicker'\r\n\r\nconst AccountBadge = () => {\r\n    const name = useSelector((state: RootStateOrAny) => state.splashScreen.userName)\r\n    const [open, setOpen] = useState(false)\r\n    const dropdownListRef = useRef(null)\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    useDetectClickAway(dropdownListRef, () => setOpen(false))\r\n\r\n    return (\r\n        <div className='navbar-wrapper'>\r\n            {history.location.pathname !== Paths.HOME\r\n                && (\r\n                    <h1 className='home-label' onClick={() => {\r\n                        history.push(Paths.HOME);\r\n                        dispatch(resetSingleCity())\r\n                    }}>\r\n                        Home\r\n                    </h1>\r\n                )}\r\n\r\n            <div >{history.location.pathname === Paths.WIDGET && <WidgetPageCategoryPicker />}</div>\r\n            <div ref={dropdownListRef} className='nav-item'>\r\n                <img\r\n                    className='avatar'\r\n                    src={`https://avatars.dicebear.com/api/identicon/${name}.svg`}\r\n                    alt=''\r\n                ></img>\r\n                <div\r\n                    className='dropdown-chevron'\r\n                    onClick={\r\n                        () => {\r\n                            setOpen(prev => !prev)\r\n                        }}\r\n                >\r\n                    {name}{open ? '🔼' : '🔽'}\r\n                </div>\r\n                <ul\r\n                    className='dropdown-menu'\r\n                    style={{ display: open ? '' : 'none' }}\r\n                >\r\n                    <li id='recent-locations' className='dropdown-item' onClick={() => history.push(Paths.RECENT_LIST)}>show recently viewed locations</li>\r\n                    <li className='dropdown-item' onClick={() => dispatch(changeName())}>change name</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AccountBadge","import * as ActionTypes from \"./ActionTypes\";\r\n\r\nexport const saveUserName = (userName: string) => ({\r\n  type: ActionTypes.SAVE_USER_NAME,\r\n  payload: userName,\r\n});\r\n\r\nexport const skipIntro = () => ({\r\n  type: ActionTypes.SKIP_INTRO,\r\n});\r\n\r\nexport const changeName = () => ({\r\n  type: ActionTypes.CHANGE_NAME,\r\n});\r\n","import React, { useRef, useEffect, useState } from 'react'\r\nimport './StartPage.css'\r\nimport Typed from 'typed.js'\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux'\r\nimport { saveUserName, skipIntro } from '../../state/actions/SplashScreenActions'\r\nimport AccountBadge from './AccountBadge'\r\nimport { WELCOME_MESSAGE } from '../../utils/Constants'\r\n\r\nconst SplashScreenHeader = () => {\r\n    const [hasTypingFinished, setHasTypingFinished] = useState(false)\r\n    const [showSkipButton, setShowSkipButton] = useState(false)\r\n    const [name, setName] = useState(\"\")\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n    const skipWrapperRef = useRef<HTMLDivElement>(null)\r\n    const topWrapperRef = useRef<HTMLDivElement>(null)\r\n    const skippedIntro = useSelector((state: RootStateOrAny) => state.splashScreen.skippedIntro)\r\n    const [showNavbar, setShowNavbar] = useState(skippedIntro)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => { if (!skippedIntro) transitionNavbarToSplash() }, [skippedIntro])\r\n\r\n    const transitionSplashToNavbar = () => {\r\n        const wrapper = topWrapperRef.current!\r\n        wrapper.style.height = \"8vh\"\r\n        wrapper.style.boxShadow = '3px 3px 8px #cbced1,-3px -3px 8px #ffffff'\r\n\r\n        const skipWrapper = skipWrapperRef.current!\r\n        skipWrapper.style.opacity = '0'\r\n        skipWrapper.style.marginTop = '-20px'\r\n\r\n        setTimeout(() => setShowNavbar(true), 2000)\r\n    }\r\n\r\n    const transitionNavbarToSplash = () => {\r\n        const wrapper = topWrapperRef.current!\r\n        wrapper.style.height = \"100vh\"\r\n        wrapper.style.boxShadow = ''\r\n\r\n        setTimeout(() => {\r\n            setShowNavbar(false)\r\n            setShowSkipButton(true)\r\n        }, 100)\r\n    }\r\n\r\n    const options = {\r\n        strings: WELCOME_MESSAGE,\r\n        typeSpeed: 50,\r\n        backSpeed: 50,\r\n        attr: 'placeholder',\r\n        bindInputFocusEvents: true,\r\n        onComplete: () => {\r\n            setHasTypingFinished(true)\r\n            if (inputRef.current) {\r\n                inputRef.current.focus()\r\n            }\r\n            setTimeout(() => {\r\n                setShowSkipButton(true)\r\n            }, 3000)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (inputRef.current) {\r\n            const typed = new Typed(inputRef.current, options)\r\n            typed.start()\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className={showNavbar ? \"navbar\" : \"wrapper\"} ref={topWrapperRef} >\r\n            {\r\n                showNavbar ?\r\n                    <AccountBadge />\r\n                    : <>\r\n                        <div style={{ transition: '2s', display: 'flex', width: '15em' }}>\r\n                            <input\r\n                                className='name-input'\r\n                                ref={inputRef}\r\n                                style={{ borderBottom: hasTypingFinished ? \"1px white solid\" : \"\" }}\r\n                                value={name}\r\n                                onChange={(e) => setName(e.target.value)}\r\n                            />\r\n                            {\r\n                                name.length > 0 &&\r\n                                <button\r\n                                    className=\"styled-button\"\r\n                                    onClick={() => {\r\n                                        dispatch(saveUserName(name))\r\n                                        transitionSplashToNavbar()\r\n                                    }}>\r\n                                    ok\r\n                                </button>\r\n                            }\r\n                        </div>\r\n                        <div\r\n                            className='skipWrapper'\r\n                            ref={skipWrapperRef}\r\n                            style={{\r\n                                marginTop:\r\n                                    showSkipButton ?\r\n                                        \"77px\"\r\n                                        : \"100px\"\r\n                            }}>\r\n                            {showSkipButton && <button className='styled-button' onClick={() => {\r\n                                transitionSplashToNavbar()\r\n                                dispatch(skipIntro())\r\n                            }}  >skip</button>}\r\n                        </div>\r\n                    </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SplashScreenHeader\r\n\r\n","import * as ActionTypes from \"./ActionTypes\";\r\n\r\nexport const pickCoordinates = (coords: Coordinates) => ({\r\n  type: ActionTypes.PICK_COORDINATES,\r\n  payload: coords,\r\n});\r\n\r\nexport const noCitiesFoundInNearby = () => ({\r\n  type: ActionTypes.NO_NEARBY_CITIES,\r\n});\r\n\r\nexport const getNearesCitiesSuceeded = (\r\n  cityNames: string[],\r\n  cityCoords: Coordinates[],\r\n  cityLinks: string[]\r\n) => ({\r\n  type: ActionTypes.NEARBY_CITIES_FETCH_SUCCEEDED,\r\n  payload: { cityNames, cityCoords, cityLinks },\r\n});\r\n\r\nexport const getNearesCitiesFailed = () => ({\r\n  type: ActionTypes.NEARBY_CITIES_FETCH_FAILED,\r\n});\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { CesiumComponentRef, CesiumWidget } from 'resium'\r\nimport { Cartesian3, Cartographic, Math as Mt, CesiumWidget as Cst } from 'cesium'\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux';\r\nimport { pickCoordinates } from '../state/actions/globeActions';\r\nimport * as Paths from '../utils/Paths'\r\nimport { useHistory } from 'react-router';\r\n\r\nconst GlobeBackground = () => {\r\n    const widgetRef = useRef<CesiumComponentRef<Cst> | null>(null)\r\n\r\n    const nearestCitiesCoords = useSelector((state: RootStateOrAny) => state.globe.fetchedNearCities.cityCoords)\r\n    const nearestCitiesNames = useSelector((state: RootStateOrAny) => state.globe.fetchedNearCities.cityNames)\r\n    const nearestCitiesLinks = useSelector((state: RootStateOrAny) => state.globe.fetchedNearCities.cityLinks)\r\n    const singleCity = useSelector((state: RootStateOrAny) => state.singleCity)\r\n    const dispatch = useDispatch()\r\n    const [widget, setWidget] = useState<Cst>()\r\n\r\n    useEffect(() => {\r\n        if (widgetRef)\r\n            setWidget(widgetRef?.current?.cesiumElement)\r\n    }, [])\r\n\r\n    const history = useHistory()\r\n\r\n    const startRotating = (longtitude: number, speed: number) => {\r\n        if (widget)\r\n            widget.camera\r\n                .flyTo({\r\n                    destination: Cartesian3.fromDegrees(longtitude, 0, 20000000),\r\n                    easingFunction: (time: number) => time,\r\n                    duration: speed,\r\n                    complete: () => startRotating(longtitude - 90, speed)\r\n                })\r\n    }\r\n\r\n    switch (history.location.pathname) {\r\n        case Paths.DART:\r\n            startRotating(-90, 0.2)\r\n            break\r\n        case Paths.HOME || Paths.WIDGET || Paths.RECENT_LIST:\r\n            startRotating(-180, 10)\r\n            break\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const regEx = new RegExp(`${Paths.CITY.split(\":\")[0]}\\\\d+`)\r\n        if (regEx.test(history.location.pathname) && widget) {\r\n            if (nearestCitiesCoords?.length === 1) {\r\n                widget.camera\r\n                    .flyTo({\r\n                        destination: Cartesian3.fromDegrees(nearestCitiesCoords[0].long, nearestCitiesCoords[0].lat, 20000)\r\n                    })\r\n                const nearCityId = nearestCitiesLinks[0].split(\":\").pop()\r\n                if (singleCity.id !== nearCityId) {\r\n                    history.push(Paths.CITY.replace(\":id\", nearCityId))\r\n                }\r\n            }\r\n\r\n            if (nearestCitiesCoords?.length > 1) {\r\n                const meanLong = nearestCitiesCoords.reduce((a: Coordinates, b: Coordinates) => (a.long + b.long)) / nearestCitiesCoords.length\r\n                const meanLat = nearestCitiesCoords.reduce((a: Coordinates, b: Coordinates) => (a.lat + b.lat)) / nearestCitiesCoords.length\r\n\r\n                widget.camera\r\n                    .flyTo({\r\n                        destination: Cartesian3.fromDegrees(meanLong, meanLat, 40000)\r\n                    })\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [nearestCitiesCoords, widget])\r\n\r\n    return (\r\n\r\n        <CesiumWidget\r\n            ref={widgetRef}\r\n            full\r\n            onClick={(m) => {\r\n                const scene = widget!.scene\r\n\r\n                const cartesian = widget!.camera.pickEllipsoid?.(\r\n                    m.position!,\r\n                    scene.globe.ellipsoid\r\n                ) ?? null\r\n                if (!cartesian) return\r\n\r\n                const cartographic = Cartographic.fromCartesian(cartesian)\r\n                dispatch(pickCoordinates({\r\n                    long: Mt.toDegrees(cartographic.longitude),\r\n                    lat: Mt.toDegrees(cartographic.latitude\r\n                    )\r\n                }))\r\n\r\n                const newCartesian = Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, nearestCitiesNames.length === 0 ? 20000000 : 20000)\r\n                widget?.camera\r\n                    .flyTo({\r\n                        destination: newCartesian,\r\n                        easingFunction: (time: number) => time,\r\n                        duration: 1\r\n                    })\r\n            }}\r\n        >\r\n        </CesiumWidget>\r\n\r\n    )\r\n}\r\n\r\nexport default GlobeBackground","import React, { useState } from 'react'\r\nimport './HomePage.css'\r\n\r\ninterface TabCardProps {\r\n    options: SingleCityTabOption[]\r\n}\r\nconst TabCard = ({ options }: TabCardProps) => {\r\n    const [selectedIndex, setSelectedIndex] = useState(0)\r\n\r\n    return (\r\n        <div className='card-wrapper'>\r\n            <div className='home-tab-card-wrapper'>\r\n                <div className='simple-flex' >\r\n                    {options.map((option, index) => {\r\n                        const className =\r\n                            index === selectedIndex ?\r\n                                'selected-tab'\r\n                                : index === selectedIndex - 1 ?\r\n                                    'tab-before'\r\n                                    : index === selectedIndex + 1 ?\r\n                                        'tab-after'\r\n                                        : index === 0 ?\r\n                                            'left-edge-tab' :\r\n                                            index === options.length - 1 ?\r\n                                                'right-edge-tab' :\r\n                                                'further-tab'\r\n                        return (\r\n                            <div\r\n                                key={index}\r\n                                onClick={() => setSelectedIndex(index)}\r\n                                className='single-tab-header'\r\n                            ><h1 className={className}>\r\n                                    {option.shortTitle}\r\n                                </h1>\r\n                            </div>\r\n                        )\r\n                    })}</div>\r\n\r\n                {options[selectedIndex].body}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TabCard","import React from 'react'\r\nimport { useHistory } from 'react-router'\r\n\r\ninterface HomePageTabBodyProps {\r\n    option: TabOption\r\n}\r\n\r\nconst HomePageTabBody = ({ option }: HomePageTabBodyProps) => {\r\n    const history = useHistory()\r\n\r\n    return (\r\n        <div className='column-flex'  >\r\n            <h1 >{option.title}</h1>\r\n            <p className='paragraph'>{option.paragraph}</p>\r\n            <p\r\n                onClick={() => history.push(option.address)}\r\n                className='tab-button'>\r\n                {option.emoji}\r\n            </p>\r\n        </div>)\r\n}\r\n\r\nexport default HomePageTabBody","import React from 'react'\r\nimport { useHistory } from 'react-router';\r\nimport Tilt from 'react-parallax-tilt';\r\nimport './HomePage.css'\r\n\r\nconst HomePageCard = ({ title, paragraph, emoji, address }: { title: string, paragraph: string, emoji: string, address: string }) => {\r\n    const history = useHistory()\r\n\r\n    return (\r\n        <div onClick={() => history.push(address)}>\r\n            <Tilt className='tilt-parallax' perspective={1000} glareBorderRadius={'10px'} glareEnable glareMaxOpacity={0.9} glareColor=\"lightblue\" glarePosition=\"all\" scale={1.1} >\r\n                <div className='tilt-card-inner-wrapper' >\r\n                    <h1 className='tilt-transform' >{title}</h1>\r\n                    <p className='tilt-transform' >{paragraph}</p>\r\n                    <p className='big-tilt-transform'>{emoji}</p>\r\n                </div>\r\n            </Tilt>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePageCard","import React from 'react'\r\nimport { useMediaQuery } from '../../hooks/useMediaQuery';\r\nimport './HomePage.css'\r\nimport TabCard from './TabCard';\r\nimport * as Paths from '../../utils/Paths'\r\nimport HomePageTabBody from './HomePageTabBody';\r\nimport HomePageCard from './HomePageCard';\r\n\r\nconst HomePage = () => {\r\n\r\n    const options = [\r\n        {\r\n            shortTitle: 'Dart throw🎯',\r\n            title: \"Try your luck\",\r\n            paragraph: \"throw a dart at the globe to select destination of your next journey\",\r\n            emoji: '🎯',\r\n            address: Paths.DART\r\n        },\r\n        {\r\n            shortTitle: 'Widget🔍',\r\n            title: \"Search by Widget\",\r\n            paragraph: \"search for details a holiday destination by browsing through the Teleport widget\",\r\n            emoji: '🔍',\r\n            address: Paths.WIDGET\r\n        }]\r\n\r\n    const isMobile = useMediaQuery('(max-width: 833px)')\r\n\r\n    return (\r\n        <>{\r\n            isMobile ?\r\n                <TabCard options={options.map(option => { return { ...option, body: <HomePageTabBody option={option} /> } })} />\r\n                : <div className='card-wrapper'>\r\n                    {options.map(option => (\r\n                        <HomePageCard key={option.title} title={option.title} paragraph={option.paragraph} emoji={option.emoji} address={option.address} />\r\n                    ))}\r\n                </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HomePage","import { useState, useEffect } from \"react\";\r\n\r\nexport const useMediaQuery = (query: string) => {\r\n  const [matches, setMatches] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const media = window.matchMedia(query);\r\n    if (media.matches !== matches) {\r\n      setMatches(media.matches);\r\n    }\r\n    const listener = () => setMatches(media.matches);\r\n    window.addEventListener(\"resize\", listener);\r\n    return () => window.removeEventListener(\"resize\", listener);\r\n  }, [matches, query]);\r\n\r\n  return matches;\r\n};\r\n","import { RootStateOrAny } from \"react-redux\";\r\nimport { createSelector } from \"reselect\";\r\n\r\nconst getNearCityNames = (state: RootStateOrAny) =>\r\n  state.globe.fetchedNearCities.cityNames;\r\nconst getNearCityCoords = (state: RootStateOrAny) =>\r\n  state.globe.fetchedNearCities.cityCoords;\r\nconst getNearCityLinks = (state: RootStateOrAny) =>\r\n  state.globe.fetchedNearCities.cityLinks;\r\n\r\nconst isThereMoreThanOneCityNearby = createSelector(\r\n  getNearCityNames,\r\n  getNearCityCoords,\r\n  getNearCityLinks,\r\n  (names, coords, links) => {\r\n    if (names.length === 1 || coords.length === 1 || links.length === 1)\r\n      return { name: names[0], coords: coords[0], link: links[0] };\r\n    if (names.length === 0 || coords.length === 0 || links.length === 1)\r\n      return false;\r\n    return true;\r\n  }\r\n);\r\n\r\nexport { isThereMoreThanOneCityNearby };\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router'\r\nimport { isThereMoreThanOneCityNearby } from '../../state/selectors/nearCitySelectors'\r\nimport './DartPage.css'\r\nimport * as Paths from '../../utils/Paths'\r\n\r\nconst DraftPage = () => {\r\n    const history = useHistory()\r\n    const isOnlyCity = useSelector(isThereMoreThanOneCityNearby)\r\n\r\n    useEffect(() => {\r\n        if (typeof isOnlyCity !== 'boolean') {\r\n            const cityId = isOnlyCity.link.split(':').pop().split(\"/\")[0]\r\n            history.push(Paths.CITY.replace(\":id\", cityId))\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [isOnlyCity])\r\n\r\n    return (\r\n        <div className='dart-top-label' >\r\n            click on globe to throw a dart\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DraftPage\r\n","import { RootStateOrAny } from \"react-redux\";\r\nimport { createSelector } from \"reselect\";\r\n\r\nconst getUrbanAreaSlug = (state: RootStateOrAny) =>\r\n  state.singleCity.extendedCityData.data?._embedded?.[\"city:urban_area\"]\r\n    ?.slug ?? false;\r\n\r\nconst isThereCitySlug = createSelector(getUrbanAreaSlug, (slug) => slug);\r\n\r\nexport { isThereCitySlug };\r\n","import React, { useState } from 'react'\r\nimport '../homePage/HomePage.css'\r\n\r\ninterface SingleCityTabCardProps {\r\n    options: SingleCityTabOption[]\r\n}\r\n\r\nconst SingleCityTabCard = ({ options }: SingleCityTabCardProps) => {\r\n    const [selectedIndex, setSelectedIndex] = useState(0)\r\n    const [open, setOpen] = useState(true)\r\n\r\n    return (\r\n        <div className='tab-card-wrapper'>\r\n            <div className='tab-card'>\r\n                <div className='tab-headers'>\r\n                    {options.map((option, index) => {\r\n                        const className =\r\n                            index === selectedIndex ?\r\n                                'selected-tab'\r\n                                : index === selectedIndex - 1 ?\r\n                                    'tab-before'\r\n                                    : index === selectedIndex + 1 ?\r\n                                        'tab-after'\r\n                                        : index === 0 ?\r\n                                            'left-edge-tab' :\r\n                                            index === options.length - 1 ?\r\n                                                'right-edge-tab' :\r\n                                                'further-tab'\r\n                        return (\r\n                            <div\r\n                                key={index}\r\n                                onClick={() => setSelectedIndex(index)}\r\n                                className='single-tab-header'\r\n                            >\r\n                                <h1 className={className}>\r\n                                    {option.shortTitle}\r\n                                </h1>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                    <div className='card-tab-chevron' onClick={() => { setOpen(prev => !prev) }}>{open ? '🔽' : '🔼'}\r\n                    </div>\r\n                </div>\r\n                {open && options[selectedIndex].body}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleCityTabCard","import React from 'react'\r\nimport { WidgetCategory } from '../../types/WidgetCategory'\r\nimport './SingleCityPage.css'\r\n\r\ninterface WidgetTabProps {\r\n    category: WidgetCategory;\r\n    urbanArea: string\r\n}\r\n\r\nconst WidgetTab = ({ category, urbanArea }: WidgetTabProps) => {\r\n    return <iframe className='widget-tab' src={`https://teleport.org/cities/${urbanArea}/widget/${category}/?currency=USD&citySwitcher=false`} title='widget' ></iframe>\r\n}\r\n\r\nexport default WidgetTab","import React from 'react'\r\nimport { useSelector, RootStateOrAny } from 'react-redux'\r\n\r\nconst BasicInfoTab = () => {\r\n    const extendedData = useSelector((state: RootStateOrAny) => state.singleCity.extendedCityData.data)\r\n    const alternateNames = extendedData._embedded?.['city:alternate-names']\r\n        .alternate_names\r\n\r\n    return (\r\n        <div className='basic-info-wrapper' >\r\n            <h1 >{extendedData.full_name}</h1>\r\n            <div>\r\n                <p className='center-text'>city population: {extendedData.population}</p>\r\n                <p className='center-text'>\r\n                    country population: {extendedData._embedded?.['city:country'].population ?? ''}\r\n                </p>\r\n            </div>\r\n\r\n            <p className='center-text'>\r\n                currency: {extendedData._embedded?.['city:country']?.currency_code ?? ''}\r\n            </p>\r\n            {\r\n                alternateNames?.length > 1 && (\r\n                    <div className='alternate-names'>\r\n                        alternative names:<div className='alternate-names-scroller'>\r\n                            {alternateNames\r\n                                .map((name: { name: string }) => (\r\n                                    <p key={name.name} className='no-margin'>\r\n                                        {name.name}\r\n                                    </p>\r\n                                ))}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            <p className='center-text'>\r\n                timezone: {extendedData._embedded?.['city:timezone'].iana_name ?? ''}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BasicInfoTab","import React, { useEffect } from 'react'\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux'\r\nimport { getSingleCityData } from '../../state/actions/singleCityActions'\r\nimport {\r\n    isThereCitySlug\r\n} from '../../state/selectors/singleCitySelectors'\r\nimport { pickCoordinates } from '../../state/actions/globeActions'\r\nimport SingleCityTabCard from './SingleCityTabCard'\r\nimport WidgetTab from './WidgetTab'\r\nimport { ALL_WIDGET_CATEGORIES, WIDGET_TABS_EMOJIS } from '../../utils/Constants'\r\nimport BasicInfoTab from './BasicInfoTab'\r\n\r\nconst SingleCityPage = ({ id }: { id: string }) => {\r\n    const cityName: string = useSelector((state: RootStateOrAny) => state.singleCity.fetchedBasicCityData.cityName)\r\n    const cityId = useSelector((state: RootStateOrAny) => state.singleCity.id)\r\n    const cityCoords = useSelector((state: RootStateOrAny) => state.singleCity.fetchedBasicCityData.cityCoords)\r\n    const currentCoords = useSelector((state: RootStateOrAny) => state.globe.coords)\r\n    const citySlug = useSelector(isThereCitySlug)\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (cityId !== id) {\r\n            dispatch(getSingleCityData(id))\r\n        }\r\n        if (\r\n            cityCoords.long !== currentCoords.long ||\r\n            cityCoords.lat !== currentCoords.lat\r\n        )\r\n            dispatch(pickCoordinates({\r\n                long: cityCoords.long,\r\n                lat: cityCoords.lat\r\n            }))\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [id, cityCoords])\r\n\r\n    const options = [\r\n        {\r\n            shortTitle: 'Basic Info🌐',\r\n            body: <BasicInfoTab />,\r\n        }]\r\n\r\n    if (citySlug)\r\n        options.push(...ALL_WIDGET_CATEGORIES.map((category: string, index: number) => ({\r\n            shortTitle: category\r\n                .replace(category[0], category[0].toUpperCase())\r\n                .concat(WIDGET_TABS_EMOJIS[index]),\r\n            body: <WidgetTab category={category} urbanArea={citySlug} />,\r\n        })))\r\n\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className='single-city-page-label' >\r\n                {cityName}\r\n            </div>\r\n            <SingleCityTabCard options={options} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SingleCityPage","import React from 'react'\r\nimport { useSelector, RootStateOrAny } from 'react-redux'\r\nimport './WidgetPageStyles.css'\r\n\r\nconst WidgetPage = () => {\r\n\r\n    const currentCategory = useSelector((state: RootStateOrAny) => state.widgetPage.category)\r\n    return (\r\n        <iframe className='widget-iframe'\r\n            src={`https://teleport.org/cities/berlin/widget/${currentCategory}/?currency=USD`}\r\n            title='widget'\r\n        ></iframe>\r\n    )\r\n}\r\n\r\nexport default WidgetPage","import * as ActionTypes from \"./ActionTypes\";\r\n\r\nexport const saveRecentLocations = (locations: RecentLocation[]) => ({\r\n  type: ActionTypes.SAVE_RECENT_LOCATIONS,\r\n  payload: locations,\r\n});\r\n\r\nexport const deleteSingleRecentLoaction = (id: string) => ({\r\n  type: ActionTypes.DELETE_SINGLE_RECENT_LOCATION,\r\n  payload: id,\r\n});\r\n\r\nexport const clearRecentsList = () => ({\r\n  type: ActionTypes.CLEAR_RECENTS_LIST,\r\n});\r\n","import React from 'react'\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router'\r\nimport { clearRecentsList, deleteSingleRecentLoaction } from '../../state/actions/recentLocationsListActions'\r\nimport * as Paths from '../../utils/Paths'\r\nimport './RecentPlacesList.css'\r\n\r\nconst RecentLocationsListPage = () => {\r\n    const history = useHistory()\r\n    const locationsList = useSelector((state: RootStateOrAny) => state.recentLocations.list)\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div className='list-wrapper'>\r\n            <ol>\r\n                {\r\n                    locationsList\r\n                        .map((location: RecentLocation) =>\r\n                            <li key={location.id}>\r\n                                <span\r\n                                    className='clickable'\r\n                                    onClick={\r\n                                        () => history.push(Paths.CITY.replace(\":id\", location.id))\r\n                                    }>\r\n                                    {location.cityName}\r\n                                </span>\r\n                                - {location.userName}{\" \"}\r\n                                <span\r\n                                    className='clickable'\r\n                                    onClick={\r\n                                        () => dispatch(deleteSingleRecentLoaction(location.id))\r\n                                    }>\r\n                                    🗑\r\n                                </span>\r\n                            </li>)\r\n                }\r\n            </ol>\r\n            <button\r\n                className='styled-button'\r\n                onClick={() => dispatch(clearRecentsList())}>\r\n                clear list\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecentLocationsListPage","import React from 'react';\r\nimport SplashScreenHeader from '../pages/startPage/SplashScreenHeader';\r\nimport GlobeBackground from './GlobeBackground';\r\nimport { Switch, Route, withRouter, Redirect, RouteComponentProps } from 'react-router-dom'\r\nimport HomePage from '../pages/homePage/HomePage'\r\nimport DraftPage from '../pages/dartPage/DartPage';\r\nimport SingleCityPage from '../pages/singleCityPage/SingleCityPage';\r\nimport WidgetPage from '../pages/widgetPage/WidgetPage';\r\nimport RecentLocationsListPage from '../pages/latestPlacesPage/RecentLocationsListPage';\r\nimport * as Paths from '../utils/Paths'\r\n\r\nfunction MainComponent() {\r\n\r\n    const SingleCityPageById = ({ match }: RouteComponentProps) => {\r\n        return <SingleCityPage id={(match.params as {} & { id: string }).id} />\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <SplashScreenHeader />\r\n            <Switch>\r\n                <Route exact path={Paths.DART} component={DraftPage} />\r\n                <Route exact path={Paths.WIDGET} component={WidgetPage} />\r\n                <Route exact path={Paths.CITY}\r\n                    component={SingleCityPageById}\r\n                />\r\n                <Route exact path={Paths.RECENT_LIST} component={RecentLocationsListPage} />\r\n                <Route exact path={Paths.HOME} component={HomePage} />\r\n                <Redirect to={Paths.HOME} />\r\n            </Switch>\r\n            <GlobeBackground />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(MainComponent);\r\n","import * as ActionTypes from \"../actions/ActionTypes\";\r\nimport { Action } from \"../../types/ActionType\";\r\n\r\nconst initNearbyCities = {\r\n  isLoading: false,\r\n  errMess: \"\",\r\n  cityNames: [] as string[],\r\n  cityCoords: [] as Coordinates[],\r\n  cityLinks: [] as string[],\r\n};\r\n\r\nexport const globeReducer = (\r\n  state = {\r\n    coords: { long: 0, lat: 0 } as Coordinates,\r\n    fetchedNearCities: initNearbyCities,\r\n  },\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionTypes.PICK_COORDINATES:\r\n      return {\r\n        ...state,\r\n        coords: action.payload,\r\n      };\r\n    case ActionTypes.NO_NEARBY_CITIES:\r\n      return {\r\n        ...state,\r\n        fetchedNearCities: initNearbyCities,\r\n      };\r\n    case ActionTypes.NEARBY_CITIES_FETCH_FAILED:\r\n      return {\r\n        ...state,\r\n        fetchedNearCities: {\r\n          ...initNearbyCities,\r\n          errMess: \"failed to fetch\",\r\n        },\r\n      };\r\n    case ActionTypes.NEARBY_CITIES_FETCH_SUCCEEDED:\r\n      return {\r\n        ...state,\r\n        fetchedNearCities: {\r\n          ...initNearbyCities,\r\n          cityNames: action.payload.cityNames,\r\n          cityCoords: action.payload.cityCoords,\r\n          cityLinks: action.payload.cityLinks,\r\n        },\r\n      };\r\n    case ActionTypes.RESET_SINGLE_CITY: {\r\n      return {\r\n        ...state,\r\n        fetchedNearCities: initNearbyCities,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const fetchNearestCitiesData = async (coords: Coordinates) => {\r\n  return fetch(\r\n    `https://api.teleport.org/api/locations/${coords.lat},${coords.long}/?embed=location%3Anearest-cities%2Flocation%3Anearest-city`\r\n  ).then((response) => response.json());\r\n};\r\n","import {call,StrictEffect} from 'redux-saga/effects'\r\n\r\nfunction* crashHandlingDecoratorSaga(\r\n    sagaToBecalled:any,\r\n    ...args:any[]\r\n):Generator<StrictEffect,any,any>{\r\n    try{\r\n        yield call(sagaToBecalled,...args);\r\n    }catch(error){\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nexport default crashHandlingDecoratorSaga","import {\r\n  call,\r\n  put,\r\n  select,\r\n  StrictEffect,\r\n  takeLatest,\r\n} from \"redux-saga/effects\";\r\nimport { fetchNearestCitiesData } from \"../../api/nearestCityApi\";\r\nimport * as ActionTypes from \"../actions/ActionTypes\";\r\nimport {\r\n  getNearesCitiesFailed,\r\n  getNearesCitiesSuceeded,\r\n  noCitiesFoundInNearby,\r\n} from \"../actions/globeActions\";\r\nimport { singleCityDataFetchSuccess } from \"../actions/singleCityActions\";\r\nimport crashHandlingDecoratorSaga from \"./crashHandlingDecoratorSaga\";\r\n\r\nfunction* throwDartSaga() {\r\n  yield takeLatest(\r\n    ActionTypes.PICK_COORDINATES,\r\n    crashHandlingDecoratorSaga,\r\n    throwDart\r\n  );\r\n}\r\n\r\nfunction* throwDart(): Generator<StrictEffect, any, any> {\r\n  const Coords = yield select((state) => state.globe.coords);\r\n  const nearestCitiesData = yield call(fetchNearestCitiesData, Coords);\r\n  const cityNames: string[] = [];\r\n  const citiesCoords: Coordinates[] = [];\r\n  const cityLinks: string[] = [];\r\n  if (nearestCitiesData) {\r\n    nearestCitiesData._embedded[\"location:nearest-cities\"]?.forEach(\r\n      (nearCityData: LocationNearestCityElement) => {\r\n        cityLinks.push(nearCityData._links[\"location:nearest-city\"].href);\r\n        cityNames.push(nearCityData._links[\"location:nearest-city\"].name);\r\n        const latlon =\r\n          nearCityData._embedded[\"location:nearest-city\"].location.latlon;\r\n        citiesCoords.push({ long: latlon.longitude, lat: latlon.latitude });\r\n      }\r\n    );\r\n\r\n    if (cityNames.length === 0 || citiesCoords.length === 0) {\r\n      yield put(noCitiesFoundInNearby());\r\n      return;\r\n    }\r\n    yield put(getNearesCitiesSuceeded(cityNames, citiesCoords, cityLinks));\r\n    yield call(checkIfOnlyCity, cityNames, citiesCoords, cityLinks);\r\n  } else {\r\n    yield put(getNearesCitiesFailed());\r\n  }\r\n}\r\n\r\nfunction* checkIfOnlyCity(\r\n  cityNames: string[],\r\n  citiesCoords: Coordinates[],\r\n  cityLinks: string[]\r\n): Generator<StrictEffect, any, any> {\r\n  if (\r\n    cityNames.length === 1 ||\r\n    citiesCoords.length === 1 ||\r\n    cityLinks.length === 1\r\n  )\r\n    yield put(\r\n      singleCityDataFetchSuccess(cityNames[0], citiesCoords[0], cityLinks[0])\r\n    );\r\n}\r\n\r\nexport default throwDartSaga;\r\n","import { put, select, StrictEffect, takeLatest } from \"redux-saga/effects\";\r\nimport * as ActionTypes from \"../actions/ActionTypes\";\r\nimport { saveRecentLocations } from \"../actions/recentLocationsListActions\";\r\n\r\nfunction* recentLocationListSaga() {\r\n  yield takeLatest(\r\n    ActionTypes.SINGLE_CITY_DATA_FETCH_SUCCEEDED,\r\n    saveRecentLocation\r\n  );\r\n}\r\n\r\nfunction* saveRecentLocation(): Generator<StrictEffect, any, any> {\r\n  const locations: RecentLocation[] = yield select(\r\n    (state) => state.recentLocations.list\r\n  );\r\n  const userName = yield select((state) => state.splashScreen.userName);\r\n  const latestCity = yield select((state) => state.singleCity);\r\n  let tmpLocations = JSON.parse(JSON.stringify(locations));\r\n  //case when there is already thius location on the list\r\n  if (locations.find((city) => city.id === latestCity.id))\r\n    tmpLocations = locations.filter((city) => city.id !== latestCity.id);\r\n  //case when there are over 40 saved locations\r\n  if (locations.length >= 40) tmpLocations = locations.slice(0, -1);\r\n\r\n  tmpLocations.unshift({\r\n    id: latestCity.id,\r\n    userName,\r\n    cityName: latestCity.fetchedBasicCityData.cityName,\r\n  });\r\n\r\n  const latestCityId = latestCity.fetchedBasicCityData.cityLink\r\n    .split(\":\")\r\n    .pop()\r\n    .split(\"/\")[0];\r\n  if (latestCityId === latestCity.id)\r\n    yield put(saveRecentLocations(tmpLocations));\r\n  return;\r\n}\r\n\r\nexport default recentLocationListSaga;\r\n","export const fetchBasicCityData = async (\r\n  cityId: string,\r\n  embedLinks?: string\r\n) => {\r\n  let embed = \"\";\r\n  if (embedLinks) embed = embed + embedLinks;\r\n  return fetch(\r\n    `https://api.teleport.org/api/cities/geonameid:${cityId}/${embed}`\r\n  ).then((response) => response.json());\r\n};\r\n","import {\r\n  all,\r\n  call,\r\n  put,\r\n  select,\r\n  StrictEffect,\r\n  takeLeading,\r\n} from \"redux-saga/effects\";\r\nimport { fetchBasicCityData } from \"../../api/singleCityApi\";\r\nimport * as ActionTypes from \"../actions/ActionTypes\";\r\nimport {\r\n  extendedCityDataFetchFailed,\r\n  extendedCityDataFetchSucceeded,\r\n  singleCityDataFetchFail,\r\n  singleCityDataFetchSuccess,\r\n} from \"../actions/singleCityActions\";\r\nimport crashHandlingDecoratorSaga from \"./crashHandlingDecoratorSaga\";\r\n\r\nfunction* getSingleCityDataSaga() {\r\n  yield takeLeading(\r\n    ActionTypes.GET_SINGLE_CITY_DATA,\r\n    crashHandlingDecoratorSaga,\r\n    getSingleCity\r\n  );\r\n}\r\n\r\nfunction* getSingleCity(): Generator<StrictEffect, any, any> {\r\n  const cityId = yield select((state) => state.singleCity.id);\r\n  const cityDataResopnse = yield call(fetchBasicCityData, cityId);\r\n  if (cityDataResopnse) {\r\n    yield all([\r\n      call(getBasicCityInfo, cityDataResopnse),\r\n      call(getAllPossibleEmbededData, cityDataResopnse),\r\n    ]);\r\n  } else {\r\n    yield put(singleCityDataFetchFail());\r\n  }\r\n}\r\n\r\nfunction* getBasicCityInfo(\r\n  cityDataResopnse: BasicCityDataRes\r\n): Generator<StrictEffect, any, any> {\r\n  const cityLink = yield select(\r\n    (state) => state.singleCity.fetchedBasicCityData.cityLink\r\n  );\r\n  const cityName = yield select(\r\n    (state) => state.singleCity.fetchedBasicCityData.cityName\r\n  );\r\n  const cityCoords = yield select(\r\n    (state) => state.singleCity.fetchedBasicCityData.cityCoords\r\n  );\r\n  if (\r\n    cityLink.length < 1 ||\r\n    cityName.length < 1 ||\r\n    !cityCoords.long ||\r\n    !cityCoords.lat\r\n  ) {\r\n    const latlon = cityDataResopnse.location.latlon;\r\n    yield put(\r\n      singleCityDataFetchSuccess(\r\n        cityDataResopnse.name,\r\n        { long: latlon.longitude, lat: latlon.latitude },\r\n        cityDataResopnse._links.self.href\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nfunction* getAllPossibleEmbededData(\r\n  cityDataResopnse: BasicCityDataRes\r\n): Generator<StrictEffect, any, any> {\r\n  const cityId = yield select((state) => state.singleCity.id);\r\n\r\n  const namesToEmbed = Object.keys(cityDataResopnse._links).filter((link) =>\r\n    link.includes(\"city\")\r\n  );\r\n\r\n  let embed = \"\";\r\n  if (namesToEmbed && namesToEmbed.length > 0) {\r\n    namesToEmbed.forEach((link, i) => {\r\n      if (i === 0) embed = embed + \"?embed=\";\r\n      else embed = embed + \"&embed=\";\r\n      embed = embed + link;\r\n    });\r\n  }\r\n\r\n  const enrichedCityDataResopnse = yield call(\r\n    fetchBasicCityData,\r\n    cityId,\r\n    embed\r\n  );\r\n\r\n  if (enrichedCityDataResopnse) {\r\n    yield put(extendedCityDataFetchSucceeded(enrichedCityDataResopnse));\r\n  } else {\r\n    yield put(extendedCityDataFetchFailed());\r\n  }\r\n}\r\n\r\nexport default getSingleCityDataSaga;\r\n","import { all } from \"redux-saga/effects\";\r\nimport throwDartSaga from \"./dartSaga\";\r\nimport recentLocationListSaga from \"./recentLocationsListSaga\";\r\nimport getSingleCityDataSaga from \"./singleCityDataSaga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    throwDartSaga(),\r\n    getSingleCityDataSaga(),\r\n    recentLocationListSaga(),\r\n  ]);\r\n}\r\n","import * as ActionTypes from \"../actions/ActionTypes\";\r\nimport { Action } from \"../../types/ActionType\";\r\n\r\nconst initFetchedBasicCityData = {\r\n  isLoading: false,\r\n  errMess: \"\",\r\n  cityName: \"\",\r\n  cityCoords: {},\r\n  cityLink: \"\",\r\n};\r\n\r\nconst initialExtendedData = {\r\n  isLoading: false,\r\n  errMess: \"\",\r\n  data: {},\r\n};\r\n\r\nexport const singleCityDataReducer = (\r\n  state = {\r\n    id: \"\",\r\n    fetchedBasicCityData: initFetchedBasicCityData,\r\n    extendedCityData: initialExtendedData,\r\n  },\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionTypes.GET_SINGLE_CITY_DATA: {\r\n      const curentLinkId =\r\n        state.fetchedBasicCityData.cityLink\r\n          .split(\":\")\r\n          .pop()\r\n          ?.split?.(\"/\")?.[0] ?? \"\";\r\n\r\n      return {\r\n        ...state,\r\n        id: action.payload,\r\n        fetchedBasicCityData:\r\n          curentLinkId === action.payload\r\n            ? state.fetchedBasicCityData\r\n            : { ...initFetchedBasicCityData, isloading: true },\r\n      };\r\n    }\r\n    case ActionTypes.SINGLE_CITY_DATA_FETCH_SUCCEEDED:\r\n      return {\r\n        ...state,\r\n        fetchedBasicCityData: {\r\n          ...initFetchedBasicCityData,\r\n          cityName: action.payload.cityName,\r\n          cityCoords: action.payload.cityCoords,\r\n          cityLink: action.payload.cityLink,\r\n        },\r\n      };\r\n    case ActionTypes.SINGLE_CITY_DATA_FETCH_FAILED:\r\n      return {\r\n        ...state,\r\n        sfetchedBasicCityData: {\r\n          ...initFetchedBasicCityData,\r\n          errMess: \"failed to fetch basic city info\",\r\n        },\r\n      };\r\n    case ActionTypes.RESET_SINGLE_CITY: {\r\n      return {\r\n        ...state,\r\n        id: \"\",\r\n        fetchedBasicCityData: initFetchedBasicCityData,\r\n        extendedCityData: initialExtendedData,\r\n      };\r\n    }\r\n    case ActionTypes.EXTENDED_CITY_DATA_FETCH_SUCCEDEED:\r\n      return {\r\n        ...state,\r\n\r\n        extendedCityData: {\r\n          ...initialExtendedData,\r\n          data: action.payload,\r\n        },\r\n      };\r\n    case ActionTypes.EXTENDED_CITY_DATA_FETCH_FAILED:\r\n      return {\r\n        ...state,\r\n        extendedCityData: {\r\n          ...initialExtendedData,\r\n          errMess: \"could not fetch extended data\",\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { splashScreenReducer } from \"./state/reducers/SplashScreenReducer\";\r\nimport { globeReducer } from \"./state/reducers/GlobeReducer\";\r\nimport rootSaga from \"./state/sagas/rootSaga\";\r\nimport { singleCityDataReducer } from \"./state/reducers/SingleCityData\";\r\nimport { recentLocationsListReducer } from \"./state/reducers/RecentLocationsList\";\r\nimport { widgetPageReducer } from \"./state/reducers/WidgetPageReducer\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  debug: true,\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  splashScreen: splashScreenReducer,\r\n  globe: globeReducer,\r\n  singleCity: singleCityDataReducer,\r\n  recentLocations: recentLocationsListReducer,\r\n  widgetPage: widgetPageReducer,\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst saga = createSagaMiddleware();\r\n\r\nexport const ConfigureStore = () => {\r\n  const composeEnhancers = composeWithDevTools({ trace: true, traceLimit: 25 });\r\n  const store = createStore(\r\n    persistedReducer,\r\n    composeEnhancers(applyMiddleware(saga))\r\n  );\r\n  const persistor = persistStore(store);\r\n  saga.run(rootSaga);\r\n\r\n  if ((window as Window & typeof globalThis & { Cypress: any }).Cypress) {\r\n    (window as Window & typeof globalThis & { store: any }).store = store;\r\n  }\r\n\r\n  return { store, persistor };\r\n};\r\n","import * as ActionTypes from \"../actions/ActionTypes\";\r\nimport { Action } from \"../../types/ActionType\";\r\n\r\nexport const splashScreenReducer = (\r\n  state = {\r\n    userName: \"\",\r\n    skippedIntro: false,\r\n  },\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SAVE_USER_NAME:\r\n      return {\r\n        ...state,\r\n        userName: action.payload,\r\n        skippedIntro: true,\r\n      };\r\n    case ActionTypes.SKIP_INTRO:\r\n      return {\r\n        ...state,\r\n        skippedIntro: true,\r\n      };\r\n    case ActionTypes.CHANGE_NAME:\r\n      return {\r\n        ...state,\r\n        skippedIntro: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as ActionTypes from \"../actions/ActionTypes\";\r\nimport { Action } from \"../../types/ActionType\";\r\n\r\nexport const recentLocationsListReducer = (\r\n  state = {\r\n    list: [] as RecentLocation[],\r\n  },\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SAVE_RECENT_LOCATIONS:\r\n      return {\r\n        ...state,\r\n        list: action.payload,\r\n      };\r\n    case ActionTypes.DELETE_SINGLE_RECENT_LOCATION:\r\n      return {\r\n        ...state,\r\n        list: state.list.filter((city) => city.id !== action.payload),\r\n      };\r\n    case ActionTypes.CLEAR_RECENTS_LIST:\r\n      return {\r\n        ...state,\r\n        list: [],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as ActionTypes from \"../actions/ActionTypes\";\r\nimport { Action } from \"../../types/ActionType\";\r\n\r\nexport const widgetPageReducer = (\r\n  state = {\r\n    category: \"startup\",\r\n  },\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_WIDGET_PAGE_CATEGORY:\r\n      return {\r\n        ...state,\r\n        category: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react'\r\nimport { FallbackProps } from 'react-error-boundary';\r\nimport * as Paths from '../utils/Paths'\r\n\r\nconst ErrorFallbackComponent = ({ error, resetErrorBoundary }: FallbackProps) => {\r\n    const resetApp = () => {\r\n        resetErrorBoundary();\r\n        if (caches) {\r\n            caches\r\n                .keys()\r\n                .then(names => {\r\n                    for (const name of names) {\r\n                        caches.delete(name)\r\n                    }\r\n                })\r\n        }\r\n        document.location.href = Paths.HOME\r\n    }\r\n\r\n    return (\r\n        <div className='error-fallback-container'>\r\n            <div role=\"alert\">\r\n                <h1 className='center-text'>\r\n                    Something Went Wrong 😕\r\n                </h1>\r\n                <pre className='red-text'>{error.message}</pre>\r\n                <button onClick={resetApp}>try again</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorFallbackComponent","import React from 'react';\nimport MainComponent from './globalComponents/MainComponent';\nimport { ErrorBoundary } from 'react-error-boundary'\nimport { Provider as ReduxProvider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { ConfigureStore } from './configureStore';\nimport ErrorFallbackComponent from './globalComponents/ErrorFallbackComponent'\n\nconst { store, persistor } = ConfigureStore()\n\nfunction App() {\n  return (\n    <ErrorBoundary\n      FallbackComponent={ErrorFallbackComponent}\n      onReset={\n        async () => {\n          await persistor.purge()\n        }\n      }\n    >\n      <ReduxProvider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <BrowserRouter>\n            <MainComponent />\n          </BrowserRouter>\n        </PersistGate>\n      </ReduxProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport '../styles/Spinner.css'\r\n\r\nconst LowSizeSpinner = () => (\r\n    <div className=\"container\">\r\n        <div className=\"spinner\">\r\n            <div />\r\n            <div />\r\n        </div>\r\n    </div>\r\n)\r\nexport default LowSizeSpinner","import i18n from \"i18next\";\r\nimport Backend from \"i18next-http-backend\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\ni18n\r\n  .use(Backend)\r\n  .use(LanguageDetector)\r\n  .use(initReactI18next)\r\n  .init({\r\n    fallbackLng: \"en\",\r\n    debug: process.env.NODE_ENV === \"development\",\r\n    detection: {\r\n      order: [\"querystring\", \"cookie\", \"header\"],\r\n      lookupCookie: \"lang\",\r\n      lookupQuerystring: \"lang\",\r\n      caches: [\"cookie\"],\r\n    },\r\n    interpolation: {\r\n      escapeValue: false,\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport LowSizeSpinner from './globalComponents/LowSizeSpinner';\nimport './utils/i18n'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback={<LowSizeSpinner />}>\n      <App />\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}